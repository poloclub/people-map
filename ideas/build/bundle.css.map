{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\PeopleMapView.svelte",
    "..\\..\\ResearcherDetailView.svelte",
    "..\\..\\SummaryView.svelte",
    "..\\..\\StatsView.svelte",
    "..\\..\\ToggleRow.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import PeopleMapView from './components/PeopleMapView.svelte'\r\n  import ResearcherDetailView from './components/ResearcherDetailView.svelte'\r\n  import StatsView from './components/StatsView.svelte'\r\n  import SummaryView from './components/SummaryView.svelte'\r\n  import ToggleRow from './components/ToggleRow.svelte'\r\n\r\n</script>\r\n\r\n<style>\r\n        .columns{\r\n            background: #F8F8F8;\r\n            padding-left: 30px;\r\n            padding-right: 30px;\r\n            padding-bottom: 0px;\r\n        }\r\n</style>\r\n\r\n<StatsView />\r\n<!-- <SettingsView /> -->\r\n<div class=\"columns\" style=\"padding-top: 0px; margin-bottom: 0px; margin-left: 0px; padding-left: 0px; padding-right: 0px; margin-right: 0px; width: 100%;\">\r\n  <div class=\"column\" style=\"min-height: 625px; padding-bottom: 60px; margin-bottom: 0px; background: #FFFFFF; padding-right: 0px; padding-left: 0px; margin-left: 0px; margin-right: 0px; width: 100%;\">\r\n    <PeopleMapView />\r\n  </div>\r\n  <div class=\"column is-narrow\" style=\"padding-right: 20px; margin: 0px\">\r\n    <div class=\"level-item\" style=\"width: 400px;\">\r\n      <ResearcherDetailView />\r\n    </div>\r\n  </div>\r\n</div>\r\n<ToggleRow />\r\n<SummaryView />",
    "\r\n<div id=\"PeopleMap\" style = \"width: 100%; height: 100%; background: #FFFFFF; \"></div>\r\n\r\n<script>\r\n\r\nimport cov from \"compute-covariance\";\r\nimport SingularValueDecomposition from 'svd-js';\r\n\r\nimport citedCoordinates from './citedCoordinates.js'\r\nimport recentCoordinates from './recentCoordinates.js'\r\n\r\nimport citedResearchQuery from './citedResearchQuery.js'\r\nimport recentResearchQuery from './recentResearchQuery.js'\r\n\r\nimport citedClusters from './citedClusters.js'\r\nimport recentClusters from './recentClusters.js'\r\n\r\n\r\n\r\n// Merge the data between citedCoordinates and citedClusters\r\nfor (var i = 0; i < citedClusters.length; i++) {\r\n\r\n  citedCoordinates[i][\"grouping1,0\"] = citedCoordinates[i][\"grouping1\"]\r\n  citedCoordinates[i][\"grouping2,0\"] = citedCoordinates[i][\"grouping2\"]\r\n  citedCoordinates[i][\"grouping3,0\"] = citedCoordinates[i][\"grouping3\"]\r\n  citedCoordinates[i][\"grouping4,0\"] = citedCoordinates[i][\"grouping4\"]\r\n  citedCoordinates[i][\"grouping5,0\"] = citedCoordinates[i][\"grouping5\"]\r\n  citedCoordinates[i][\"grouping6,0\"] = citedCoordinates[i][\"grouping6\"]\r\n\r\n\r\n  for (var k = 1; k <= 10; k++) {\r\n      citedCoordinates[i][\"grouping1,\" + k] = citedClusters[i][\"grouping1,\" + k]\r\n      citedCoordinates[i][\"grouping2,\" + k] = citedClusters[i][\"grouping2,\" + k]\r\n      citedCoordinates[i][\"grouping3,\" + k] = citedClusters[i][\"grouping3,\" + k]\r\n      citedCoordinates[i][\"grouping4,\" + k] = citedClusters[i][\"grouping4,\" + k]\r\n      citedCoordinates[i][\"grouping5,\" + k] = citedClusters[i][\"grouping5,\" + k]\r\n      citedCoordinates[i][\"grouping6,\" + k] = citedClusters[i][\"grouping6,\" + k]\r\n  }\r\n}\r\n\r\n\r\n\r\n// Merge the data between recentCoordinates and recentClusters\r\nfor (var i = 0; i < recentClusters.length; i++) {\r\n\r\n  recentCoordinates[i][\"grouping1,0\"] = recentCoordinates[i][\"grouping1\"]\r\n  recentCoordinates[i][\"grouping2,0\"] = recentCoordinates[i][\"grouping2\"]\r\n  recentCoordinates[i][\"grouping3,0\"] = recentCoordinates[i][\"grouping3\"]\r\n  recentCoordinates[i][\"grouping4,0\"] = recentCoordinates[i][\"grouping4\"]\r\n  recentCoordinates[i][\"grouping5,0\"] = recentCoordinates[i][\"grouping5\"]\r\n  recentCoordinates[i][\"grouping6,0\"] = recentCoordinates[i][\"grouping6\"]\r\n\r\n\r\n  for (var k = 1; k <= 10; k++) {\r\n      recentCoordinates[i][\"grouping1,\" + k] = recentClusters[i][\"grouping1,\" + k]\r\n      recentCoordinates[i][\"grouping2,\" + k] = recentClusters[i][\"grouping2,\" + k]\r\n      recentCoordinates[i][\"grouping3,\" + k] = recentClusters[i][\"grouping3,\" + k]\r\n      recentCoordinates[i][\"grouping4,\" + k] = recentClusters[i][\"grouping4,\" + k]\r\n      recentCoordinates[i][\"grouping5,\" + k] = recentClusters[i][\"grouping5,\" + k]\r\n      recentCoordinates[i][\"grouping6,\" + k] = recentClusters[i][\"grouping6,\" + k]\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nimport { onMount } from 'svelte';\r\n\r\n\r\nimport {\r\n        selectedResearcherInfo, \r\n        selectedResearchInterest, \r\n        visKeywordEmphasis, \r\n        visNumClusters,\r\n        displayNames,\r\n        displayDistributions,\r\n        queryKeywordEmphasis,\r\n        datasetChoice\r\n} from '../stores/MapStore.js'\r\n\r\nvar currTimeout = null;\r\nvar currentSelectedFaculty = citedCoordinates;\r\nvar currentSelectedFacultyRankData = citedResearchQuery;\r\n\r\n\r\nonMount(renderGraph);\r\n\r\nfunction renderGraph() {\r\n  \r\n\r\n  var chartDiv = document.getElementById(\"PeopleMap\");\r\n\r\n  var width = chartDiv.clientWidth;\r\n  var height = chartDiv.clientHeight;\r\n\r\n\r\n\r\n\r\n  // Calculate emphasis range\r\n  var countEmphasis = 0\r\n  while (currentSelectedFaculty[0]['x' + countEmphasis] != null) {\r\n      countEmphasis += 1\r\n  }\r\n  countEmphasis = countEmphasis - 1\r\n\r\n\r\n  // append the svg object to the body of the page\r\n  var svg = d3.select(\"#PeopleMap\")\r\n    .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n    .append(\"g\");\r\n\r\n\r\n  // Rectangle for registering clicks on the graph\r\n  svg.append('rect')\r\n     .attr(\"width\", width)\r\n     .attr(\"height\", height)\r\n     .attr(\"opacity\",\"0%\")\r\n     .on(\"click\", function(d) {\r\n        handleClick(currentlyClicked);\r\n     })\r\n    \r\n\r\n\r\n      // Set domain of the xAxis\r\n      var x = d3.scaleLinear().range([80, width - 150]);\r\n\r\n      x.domain([d3.min(currentSelectedFaculty, function(d) {\r\n\r\n        var min = d.x0\r\n        for (var i = 0; i <= countEmphasis; i++) {\r\n          if (d[\"x\" + i] < min) {\r\n            min = d[\"x\" + i]\r\n          }\r\n        }\r\n        return min\r\n\r\n      }), d3.max(currentSelectedFaculty, function(d) { \r\n        \r\n          var max = d.x0\r\n          for (var i = 0; i <= countEmphasis; i++) {\r\n            if (d[\"x\" + i] > max) {\r\n              max = d[\"x\" + i]\r\n            }\r\n          }\r\n          return max\r\n\r\n      })]); \r\n\r\n      // Append xAxis\r\n      var xAxis = svg.append(\"g\")\r\n                     .attr(\"transform\", \"translate(0,\" + height + \")\");\r\n\r\n\r\n\r\n      // Set domain of yAxis\r\n      var y = d3.scaleLinear().range([height - 60, 20]);\r\n\r\n\r\n\r\n\r\n      \r\n\r\n      y.domain([d3.min(currentSelectedFaculty, function(d) {\r\n\r\n          var min = d.y0\r\n          for (var i = 0; i <= countEmphasis; i++) {\r\n            if (d[\"y\" + i] < min) {\r\n              min = d[\"y\" + i]\r\n            }\r\n          }\r\n          return min\r\n\r\n      }), d3.max(currentSelectedFaculty, function(d) { \r\n        \r\n          var max = d.y0\r\n          for (var i = 0; i <= countEmphasis; i++) {\r\n            if (d[\"y\" + i] > max) {\r\n              max = d[\"y\" + i]\r\n            }\r\n          }\r\n        return max\r\n\r\n      })]); \r\n\r\n      // Append yAxis\r\n      var yAxis = svg.append(\"g\");\r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n      // Blue, Orange, Red, Green, Brown, Yellow, Gray, Black, Pink\r\n      var colors = [\"#0000CD\",\"#FFA500\", \"#FF0000\",\"#006400\",\"#8B4513\",\"#FFFF00\",\"#A9A9A9\",\"#000000\",\"#FF1493\"]\r\n\r\n\r\n      // 7 shade gradient of purple, starting with most dark and growing lighter after that\r\n      var purpleGradient = [\"#3f007d\",\"#54278f\",\"#6a51a3\",\"#807dba\",\"#9e9ac8\",\"#bcbddc\",\"#dadaeb\",\"#efedf5\",\"#fcfbfd\"]\r\n\r\n\r\n\r\n     \r\n\r\n      // Filter out data with the selection\r\n      var dataFilter = currentSelectedFaculty.map(function(d) {\r\n        return {xCoordinate: d[\"x0\"], yCoordinate: d[\"y0\"], Author: d.Author, Group: d.grouping6,\r\n                Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL} \r\n      })\r\n\r\n      \r\n\r\n\r\n      // Currently click author\r\n      var currentlyClicked = \"\"\r\n\r\n\r\n\r\n\r\n\r\n      // Assign researcher detail view to display the first datapoint data\r\n      var keywordTokens = dataFilter[0].KeyWords.split(\", \")\r\n\r\n      var finalTokens = [\"\",\"\",\"\",\"\",\"\"]\r\n\r\n      for (var i = 0; i < keywordTokens.length; i++) {\r\n          finalTokens[i] = keywordTokens[i]\r\n      }\r\n      \r\n      var updatedResearcherSelection = {\r\n          name: dataFilter[0].Author,\r\n          affiliation: dataFilter[0].Affiliation,\r\n          scholarKeywords: finalTokens,\r\n          citations: dataFilter[0].Citations,\r\n          url: dataFilter[0].URL,\r\n          pictureURL: dataFilter[0].PictureURL\r\n      }\r\n\r\n      selectedResearcherInfo.set(updatedResearcherSelection)\r\n\r\n\r\n\r\n\r\n      //Isolates the clusters of researchers for ellipse computation\r\n      function splitResearchers(filteredData, groupingNumber) {\r\n\r\n        var arrayOfClusteredResearchers = []\r\n        var total = 0\r\n        var currentGroup = 0\r\n        var currentSet = []\r\n        while (total < filteredData.length) {\r\n          currentSet = filteredData.filter(function(d) {\r\n              if (d.Group == currentGroup) {\r\n                return d\r\n              }\r\n          })\r\n\r\n          arrayOfClusteredResearchers[currentGroup] = currentSet\r\n          total += currentSet.length\r\n          currentGroup += 1\r\n\r\n        }\r\n\r\n        return arrayOfClusteredResearchers\r\n\r\n      }\r\n\r\n\r\n      //Separates the researcher groups into arrays of x and y coordinates\r\n      function generateXAndYCoordinates(splitGroups, keywordsEmphasis) {\r\n        \r\n        var totalCoordinates = []\r\n        for (var i = 0; i < splitGroups.length; i++) {\r\n          var currentGroup = []\r\n          for (var j = 0; j < splitGroups[i].length; j++) {\r\n            currentGroup[j] = [splitGroups[i][j].xCoordinate, splitGroups[i][j].yCoordinate]\r\n          }\r\n          totalCoordinates[i] = currentGroup\r\n        }\r\n        return totalCoordinates\r\n      }\r\n\r\n      //Gets the center among all of the coordinates and the eigenvectors\r\n      function generateEllipseInfo(coordinateMatrices) {\r\n        \r\n        var totalInfo = []\r\n\r\n        for (var i = 0; i < coordinateMatrices.length; i++) {\r\n          \r\n          var centerX = 0\r\n          var centerY = 0\r\n          var xValues = []\r\n          var yValues = []\r\n\r\n          for (var j = 0; j < coordinateMatrices[i].length; j++) {\r\n            centerX += coordinateMatrices[i][j][0]\r\n            centerY += coordinateMatrices[i][j][1]\r\n            xValues[j] = coordinateMatrices[i][j][0]\r\n            yValues[j] = coordinateMatrices[i][j][1]\r\n          }\r\n\r\n          centerX = centerX / coordinateMatrices[i].length\r\n          centerY = centerY / coordinateMatrices[i].length\r\n\r\n          var covarianceMatrix = cov(xValues, yValues)\r\n          var eigenvectors = (SingularValueDecomposition.SVD(covarianceMatrix)).u\r\n          var eigenvalues = (SingularValueDecomposition.SVD(covarianceMatrix)).q\r\n\r\n          var currentEllipseData = {CenterX: centerX, CenterY: centerY, Eigenvectors: eigenvectors, Eigenvalues: eigenvalues, Group: i}\r\n\r\n          totalInfo[i] = currentEllipseData\r\n        }\r\n\r\n        return totalInfo\r\n\r\n      }\r\n\r\n      // Process initial info for ellipses\r\n      var separation = splitResearchers(dataFilter, 6)\r\n      var completedSet = generateXAndYCoordinates(separation, 0)\r\n      var ellipseInfo = generateEllipseInfo(completedSet)\r\n\r\n      var currentEllipseInfo = ellipseInfo;\r\n\r\n      // Ellipses representing the Gaussian distribution\r\n      var outerEllipse = svg.selectAll('outerEllipse')\r\n                             .data(ellipseInfo)\r\n                          .enter()\r\n                             .append('ellipse');\r\n\r\n      outerEllipse.attr(\"rx\", function(d) {\r\n                               return x(d.Eigenvalues[0] / d.Eigenvalues[1]) / 4\r\n                          })\r\n                    .attr(\"ry\", function(d) {\r\n                                return y(d.Eigenvalues[1]) / 4\r\n                          })\r\n                    .attr(\"transform\", function(d) {\r\n                                var angle = Math.atan(d.Eigenvectors[0][1] / d.Eigenvectors[0][0])\r\n                                angle = (angle / 3.1415) * 180 + 90\r\n                                return \"translate(\"+ x(d.CenterX) +\",\" + y(d.CenterY) + \") rotate(\" + angle + \")\"\r\n                          })\r\n                    .style(\"fill\", function(d) {\r\n                        return \"url(#radial-gradient\" + d.Group + \")\"\r\n                    })\r\n                    .style('mix-blend-mode',\"multiply\")\r\n                    .attr(\"opacity\", \"0%\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      // Set the jittering width\r\n      var jitterWidth = 0\r\n\r\n\r\n\r\n\r\n\r\n\r\n      // Initialize dots with Zero Keywords and Five Clusters\r\n      var dot = svg\r\n        .selectAll('circle')\r\n        .data(dataFilter)\r\n        .enter()\r\n        .append('circle')\r\n          .attr(\"cx\", function(d) {\r\n            return x(d.xCoordinate) + Math.random() * jitterWidth\r\n          })\r\n          .attr(\"cy\", function(d) { \r\n            return y(d.yCoordinate) + Math.random() * jitterWidth\r\n          })\r\n          .attr(\"r\", 8)\r\n          .style(\"fill\", function(d) {\r\n              return colors[d.Group]\r\n          })\r\n          .attr(\"opacity\", \"70%\")\r\n          .on(\"mouseover\", function(dataPoint) {\r\n\r\n              if (currentlyClicked == \"\") {\r\n\r\n\r\n                  var keywordTokens = dataPoint.KeyWords.split(\", \")\r\n\r\n                  var finalTokens = [\"\",\"\",\"\",\"\",\"\"]\r\n\r\n                  for (var i = 0; i < keywordTokens.length; i++) {\r\n                      finalTokens[i] = keywordTokens[i]\r\n                  }\r\n            \r\n                  var updatedResearcherSelection = {\r\n                    name: dataPoint.Author,\r\n                    affiliation: dataPoint.Affiliation,\r\n                    scholarKeywords: finalTokens,\r\n                    citations: dataPoint.Citations,\r\n                    url: dataPoint.URL,\r\n                    pictureURL: dataPoint.PictureURL\r\n                  }\r\n\r\n                  selectedResearcherInfo.set(updatedResearcherSelection)\r\n\r\n                  text.data(dataFilter).transition()\r\n                    .duration(300)\r\n                      .text(function(d) {\r\n                        if (d.Author == dataPoint.Author) {\r\n                          return d.Author\r\n                        } else {\r\n                          return \"\"\r\n                        }\r\n                    })\r\n\r\n                  dot.data(dataFilter).transition()\r\n                    .duration(300)\r\n                      .attr(\"opacity\", function(d) {\r\n                          if (d.Author == dataPoint.Author) {\r\n                            return \"100%\"\r\n                          } else {\r\n                            return \"20%\"\r\n                          }\r\n                      })\r\n                      .attr(\"r\", function(d) {\r\n                          if (d.Author == dataPoint.Author) {\r\n                            return 10\r\n                          } else {\r\n                            return 8\r\n                          }\r\n                      })\r\n\r\n              }\r\n\r\n          })\r\n          .on(\"mouseout\", function(dataPoint) {\r\n              text.data(dataFilter)\r\n                .transition()\r\n              .duration(300)\r\n                .text(function(d) {\r\n                        if ($displayNames == true) {\r\n                          return d.Author\r\n                        } else {\r\n                          return \"\"\r\n                        }\r\n                    })\r\n\r\n              dot.data(dataFilter)\r\n                .transition()\r\n              .duration(300)\r\n                .attr(\"opacity\", function(d) {\r\n                    if (currentlyClicked != \"\") {\r\n\r\n                        if (currentlyClicked == d.Author) {\r\n                          return \"100%\"\r\n                        } else {\r\n                          return \"20%\"\r\n                        }\r\n\r\n                    } else {\r\n                        return \"70%\"\r\n                    }\r\n                    \r\n                })\r\n                .attr(\"r\", function(d) {\r\n\r\n                    if (currentlyClicked != \"\") {\r\n\r\n                        if (currentlyClicked == d.Author) {\r\n                          return 10\r\n                        } else {\r\n                          return 8\r\n                        }\r\n\r\n                    } else {\r\n                        return 8\r\n                    }\r\n\r\n                })\r\n          })\r\n          .on(\"click\", function(dataPoint) {\r\n\r\n              handleClick(dataPoint.Author);\r\n\r\n          })\r\n\r\n          var text = svg.selectAll(\"text\")\r\n                    .data(dataFilter)\r\n                 .enter()\r\n                    .append(\"text\")\r\n                    .text(function(d) {\r\n                        return \"\"\r\n                    })\r\n                    .attr(\"x\", function(d) {\r\n                        return x(d.xCoordinate) + 10 + Math.random() * jitterWidth\r\n                    })\r\n                    .attr(\"y\", function(d) {\r\n                        return y(d.yCoordinate) + 4 + Math.random() * jitterWidth\r\n                    })\r\n                    .style(\"text-shadow\",\"-1.5px 0 white, 0 1.5px white, 1.5px 0 white, 0 -1.5px white\")\r\n                    .attr(\"font_family\", \"sans-serif\")  // Font type\r\n                    .attr(\"font-size\", \"11px\")  // Font size\r\n                    .attr(\"fill\", \"black\");   // Font color\r\n\r\n\r\n\r\n          // Insert ResearchQuery Legend\r\n          var legend = svg.append(\"defs\")\r\n                          .append(\"svg:linearGradient\")\r\n                          .attr(\"id\", \"gradient\")\r\n                          .attr(\"x1\", \"100%\")\r\n                          .attr(\"y1\", \"0%\")\r\n                          .attr(\"x2\", \"100%\")\r\n                          .attr(\"y2\", \"100%\")\r\n                          .attr(\"spreadMethod\", \"pad\");\r\n\r\n                        legend.append(\"stop\")\r\n                          .attr(\"offset\", \"0%\")\r\n                          .attr(\"stop-color\", \"#3f007d\")\r\n                          .attr(\"stop-opacity\", 1);\r\n\r\n                        legend.append(\"stop\")\r\n                          .attr(\"offset\", \"100%\")\r\n                          .attr(\"stop-color\", \"#dadaeb\")\r\n                          .attr(\"stop-opacity\", 1);\r\n\r\n                        var legendRect = svg.append(\"rect\")\r\n                                            .attr(\"width\", 20)\r\n                                            .attr(\"height\", 200)\r\n                                            .style(\"fill\", \"url(#gradient)\")\r\n                                            .attr(\"transform\", \"translate(\" + (width - 40) + \", 15)\")\r\n                                            .attr(\"opacity\", \"0%\");\r\n\r\n                        var yLegend = d3.scaleLinear()\r\n                          .range([199, 0])\r\n                          .domain([6, 1]);\r\n\r\n                        var yLegendAxis = d3.axisLeft()\r\n                          .scale(yLegend)\r\n                          .ticks(5)\r\n                          .tickFormat(function(d) {\r\n                              if (d == 1) {\r\n                                return \"Most Aligned\"\r\n                              } else if (d == 6) {\r\n                                return \"Least Aligned\"\r\n                              }\r\n                          });\r\n\r\n                        \r\n\r\n\r\n                        svg.append(\"g\")\r\n                            .attr(\"class\", \"yAxisLegend\")\r\n                            .attr(\"transform\", \"translate(\" + (width - 40) + \", 15)\")\r\n                            .call(yLegendAxis)\r\n                            .append(\"text\");\r\n\r\n                        d3.select('.yAxisLegend')\r\n                                   .style(\"opacity\", \"0%\");\r\n\r\n                    \r\n\r\n\r\n\r\n      // Add gradient ellipses\r\n      var defs = svg.append(\"defs\");\r\n\r\n      //Append a radialGradient element to the defs and give it a unique id\r\n      var radialGradient0 = defs.append(\"radialGradient\")\r\n          .attr(\"id\", \"radial-gradient0\")\r\n          .attr(\"rx\", \"50%\")   \r\n          .attr(\"ry\", \"50%\");  \r\n      radialGradient0.append(\"stop\")\r\n          .attr(\"offset\", \"0%\")\r\n          .attr(\"stop-color\", colors[0])\r\n          .attr(\"opacity\", \"50%\");\r\n      radialGradient0.append(\"stop\")\r\n          .attr(\"offset\", \"100%\")\r\n          .attr(\"stop-color\", \"#F8F8F8\")\r\n          .attr(\"opacity\", \"50%\");\r\n\r\n      var radialGradient1 = defs.append(\"radialGradient\")\r\n          .attr(\"id\", \"radial-gradient1\")\r\n          .attr(\"rx\", \"50%\")  \r\n          .attr(\"ry\", \"50%\");  \r\n      radialGradient1.append(\"stop\")\r\n          .attr(\"offset\", \"0%\")\r\n          .attr(\"stop-color\", colors[1])\r\n          .attr(\"opacity\", \"50%\");\r\n      radialGradient1.append(\"stop\")\r\n          .attr(\"offset\", \"100%\")\r\n          .attr(\"stop-color\", \"#F8F8F8\")\r\n          .attr(\"opacity\", \"50%\");\r\n\r\n      var radialGradient2 = defs.append(\"radialGradient\")\r\n          .attr(\"id\", \"radial-gradient2\")\r\n          .attr(\"rx\", \"50%\")   \r\n          .attr(\"ry\", \"50%\");   \r\n      radialGradient2.append(\"stop\")\r\n          .attr(\"offset\", \"0%\")\r\n          .attr(\"stop-color\", colors[2])\r\n          .attr(\"opacity\", \"50%\");\r\n      radialGradient2.append(\"stop\")\r\n          .attr(\"offset\", \"100%\")\r\n          .attr(\"stop-color\", \"#F8F8F8\")\r\n          .attr(\"opacity\", \"50%\");\r\n\r\n      var radialGradient3 = defs.append(\"radialGradient\")\r\n          .attr(\"id\", \"radial-gradient3\")\r\n          .attr(\"rx\", \"50%\")   \r\n          .attr(\"ry\", \"50%\");   \r\n      radialGradient3.append(\"stop\")\r\n          .attr(\"offset\", \"0%\")\r\n          .attr(\"stop-color\", colors[3])\r\n          .attr(\"opacity\", \"50%\");\r\n      radialGradient3.append(\"stop\")\r\n          .attr(\"offset\", \"100%\")\r\n          .attr(\"stop-color\", \"#F8F8F8\")\r\n          .attr(\"opacity\", \"50%\");\r\n\r\n      var radialGradient4 = defs.append(\"radialGradient\")\r\n          .attr(\"id\", \"radial-gradient4\")\r\n          .attr(\"rx\", \"50%\")   \r\n          .attr(\"ry\", \"50%\");   \r\n      radialGradient4.append(\"stop\")\r\n          .attr(\"offset\", \"0%\")\r\n          .attr(\"stop-color\", colors[4])\r\n          .attr(\"opacity\", \"50%\");\r\n      radialGradient4.append(\"stop\")\r\n          .attr(\"offset\", \"100%\")\r\n          .attr(\"stop-color\", \"#F8F8F8\")\r\n          .attr(\"opacity\", \"50%\");\r\n\r\n      var radialGradient5 = defs.append(\"radialGradient\")\r\n          .attr(\"id\", \"radial-gradient5\")\r\n          .attr(\"rx\", \"50%\")   \r\n          .attr(\"ry\", \"50%\");   \r\n      radialGradient5.append(\"stop\")\r\n          .attr(\"offset\", \"0%\")\r\n          .attr(\"stop-color\", colors[5])\r\n          .attr(\"opacity\", \"50%\");\r\n      radialGradient5.append(\"stop\")\r\n          .attr(\"offset\", \"100%\")\r\n          .attr(\"stop-color\", \"#F8F8F8\")\r\n          .attr(\"opacity\", \"50%\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      // Upon change of keywords emphasis, updates the graph visualization\r\n      function updateKeywords(selectedGroup, clustersNumber) {\r\n\r\n\r\n            // Filter out data with the selection\r\n            var dataFilter = currentSelectedFaculty.map(function(d) {\r\n              return {xCoordinate: d[\"x\" + selectedGroup], yCoordinate:d[\"y\" + selectedGroup], Author: d.Author,\r\n                      Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL,\r\n                      Group: d[\"grouping\" + clustersNumber + \",\" + selectedGroup], PictureURL: d.PictureURL} \r\n            })\r\n\r\n            dot\r\n              .data(dataFilter)\r\n              .attr('pointer-events', 'none')\r\n              .transition('dot-change')\r\n              .duration(1000)\r\n              // Temporarlly disable pointer events\r\n              .attr(\"cx\", function(d) {\r\n                return x(+d.xCoordinate) + Math.random() * jitterWidth\r\n              })\r\n              .attr(\"cy\", function(d) { \r\n                return y(+d.yCoordinate) + Math.random() * jitterWidth \r\n              })\r\n              .style(\"fill\", function(d) {\r\n                return colors[d.Group]\r\n              })\r\n              .on('end', (d, i, g) => {\r\n                // Restore pointer events after the animation\r\n                d3.select(g[i])\r\n                  .attr('pointer-events', 'auto');\r\n              });\r\n          \r\n          text.data(dataFilter)\r\n              .transition()\r\n              .duration(1000)\r\n              .attr(\"x\", function(d) {\r\n                  return x(d.xCoordinate) + 10 + Math.random() * jitterWidth\r\n              })\r\n              .attr(\"y\", function(d) {\r\n                  return y(d.yCoordinate) + 4 + Math.random() * jitterWidth\r\n              })\r\n\r\n\r\n      }\r\n\r\n      // A function that update the chart with a new cluster coloring\r\n      function updateClusters(selectedGroup, keywordsEmphasis) {\r\n\r\n       \r\n            // Filter out data with the selection\r\n            var dataFilter = currentSelectedFaculty.map(function(d) {\r\n              return { Grouping: d[\"grouping\" + selectedGroup + \",\" + keywordsEmphasis], Author: d.Author, Affiliation: d.Affiliation, \r\n                       KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL } \r\n            })\r\n\r\n\r\n            dot\r\n              .data(dataFilter)\r\n              .transition()\r\n              .duration(1000)\r\n                .style(\"fill\", function(d) {\r\n                  return colors[d.Grouping]\r\n                })\r\n              \r\n\r\n\r\n\r\n      }\r\n\r\n    // A function that update the chart with a new ranking coloring\r\n    function updateRanking(phrase, emphasis) {\r\n\r\n\r\n        // Assign new ranking for current Research Query\r\n        for(var i = 0; i < currentSelectedFaculty.length; i++) {\r\n\r\n          currentSelectedFaculty[i].currentRank = currentSelectedFacultyRankData[phrase][emphasis][i].rank\r\n\r\n        }\r\n\r\n        // Filter out data with the selection\r\n        var dataFilter = currentSelectedFaculty.map(function(d) {\r\n          return { Author: d.Author, Affiliation: d.Affiliation, CurrentRank: d.currentRank,\r\n                   KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL } \r\n        })\r\n\r\n\r\n        dot\r\n          .data(dataFilter)\r\n          .transition()\r\n          .duration(1000)\r\n            .style(\"fill\", function(d) {\r\n              if (d.CurrentRank == -1 || d.CurrentRank >= 5) {\r\n                return purpleGradient[6]\r\n              } else {\r\n                return purpleGradient[d.CurrentRank]\r\n              }\r\n            })\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n        legendRect.transition()\r\n                  .duration(1000)\r\n                  .attr(\"opacity\",\"100%\");\r\n\r\n        d3.select('.yAxisLegend').transition()\r\n                                 .duration(1000)\r\n                                 .ease(d3.easeLinear)\r\n                                 .style(\"opacity\", \"100%\");\r\n\r\n\r\n     \r\n\r\n    }\r\n\r\n\r\n\r\n    // A function that update the chart with the researcher names, either displayed or undisplayed\r\n    function updateNames(selectedOption) {\r\n\r\n            // Filter out data with the selection\r\n            var dataFilter = currentSelectedFaculty.map(function(d) {\r\n                return { Author: d.Author, Affiliation: d.Affiliation, KeyWords: d.KeyWords, \r\n                         Citations: d.Citations, URL: d.URL, Rank: d.Rank, PictureURL: d.PictureURL } \r\n            })\r\n\r\n\r\n            text.data(dataFilter)\r\n                .transition()\r\n              .duration(1000)\r\n                .attr(\"font_family\", \"sans-serif\")  // Font type\r\n                .attr(\"font-size\", \"11px\")  // Font size\r\n                .attr(\"fill\", \"black\")   // Font color\r\n                .text(function(d) {\r\n                        if (selectedOption == true) {\r\n                          return d.Author\r\n                        } else {\r\n                          return \"\"\r\n                        }\r\n                    })\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n      // A function that updates the chart with a new Gaussian distribution set\r\n      function updateDistributions(selectedOption, keywordsEmphasis, clustersNumber) {\r\n\r\n\r\n          outerEllipse.data(currentEllipseInfo)\r\n                        .transition()\r\n                        .duration(1000)\r\n                        .attr(\"opacity\", \"0%\")\r\n\r\n\r\n\r\n          // Filter out data with the selection\r\n          var dataFilter = currentSelectedFaculty.map(function(d) {\r\n            return {xCoordinate: d[\"x\" + keywordsEmphasis], yCoordinate:d[\"y\" + keywordsEmphasis], Author: d.Author,\r\n                    Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, \r\n                    Group: d[\"grouping\" + clustersNumber + \",\" + keywordsEmphasis], PictureURL: d.PictureURL} \r\n          })\r\n\r\n          var separation = splitResearchers(dataFilter, clustersNumber)\r\n          var completedSet = generateXAndYCoordinates(separation, keywordsEmphasis)\r\n          var ellipseInfo = generateEllipseInfo(completedSet)\r\n\r\n          currentEllipseInfo = ellipseInfo\r\n\r\n\r\n          outerEllipse.data(ellipseInfo)\r\n                      .transition()\r\n                      .duration(1000)\r\n                      .attr(\"rx\", function(d) {\r\n                          var firstEigenvalue = d.Eigenvalues[0]\r\n                          var secondEigenvalue = d.Eigenvalues[1]\r\n                          var confidenceInterval = Math.sqrt(d.Eigenvalues[0] * 5.991 * 4)\r\n                          return confidenceInterval * width / 2\r\n                      })\r\n                      .attr(\"ry\", function(d) {\r\n                          var firstEigenvalue = d.Eigenvalues[0]\r\n                          var secondEigenvalue = d.Eigenvalues[1]\r\n                          var confidenceInterval = Math.abs(Math.sqrt(d.Eigenvalues[1] * 5.991 * 4))\r\n                          return confidenceInterval * height / 2\r\n                      })\r\n                      .attr(\"transform\", function(d) {\r\n                          var angle = Math.atan(d.Eigenvectors[0][1] / d.Eigenvectors[0][0])\r\n                          angle = (angle / 3.1415) * 180\r\n                          return \"translate(\"+ x(d.CenterX) +\",\" + y(d.CenterY) + \") rotate(\" + angle + \")\"\r\n                            })\r\n                      .style(\"fill\", function(d) {\r\n                          return \"url(#radial-gradient\" + d.Group + \")\"\r\n                      })\r\n                      .style('mix-blend-mode',\"multiply\")\r\n                      .attr(\"opacity\", function(d) {\r\n                          if (selectedOption == true) {\r\n                              return \"50%\"\r\n                          } else {\r\n                              return \"0%\"\r\n                          }\r\n                      });\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n      // A function that updates the graph with the new dataset\r\n      function updateDataset(selectedKeywords, selectedClusters) {\r\n\r\n\r\n            // Filter out data with the selection\r\n            var dataFilter = currentSelectedFaculty.map(function(d) {\r\n              return {xCoordinate: d[\"x\" + selectedKeywords], yCoordinate:d[\"y\" + selectedKeywords], Author: d.Author,\r\n                      Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL,\r\n                      Grouping: d[\"grouping\" + selectedClusters + \",\" + selectedKeywords], PictureURL: d.PictureURL} \r\n            })\r\n\r\n\r\n            dot\r\n              .data(dataFilter)\r\n              .transition()\r\n              .duration(1000)\r\n                .attr(\"cx\", function(d) {\r\n                  return x(+d.xCoordinate) + Math.random() * jitterWidth\r\n                })\r\n                .attr(\"cy\", function(d) { \r\n                  return y(+d.yCoordinate) + Math.random() * jitterWidth\r\n                })\r\n                .style(\"fill\", function(d) {\r\n                  return colors[d.Grouping]\r\n                })\r\n\r\n            text.data(dataFilter)\r\n                .transition()\r\n                .duration(1000)\r\n                .attr(\"x\", function(d) {\r\n                    return x(d.xCoordinate) + 10\r\n                })\r\n                .attr(\"y\", function(d) {\r\n                    return y(d.yCoordinate) + 4\r\n                })\r\n\r\n            \r\n              \r\n\r\n\r\n\r\n      }\r\n\r\n\r\n      function handleClick(dataPoint) {\r\n\r\n\r\n          if (currentlyClicked == \"\" & dataPoint != \"\") {\r\n\r\n                    currentlyClicked = dataPoint\r\n\r\n                    dot.data(dataFilter)\r\n                        .transition()\r\n                      .duration(300)\r\n                        .attr(\"opacity\", function(d) {\r\n                            if (d.Author == dataPoint) {\r\n                              return \"100%\"\r\n                            } else {\r\n                              return \"20%\"\r\n                            }\r\n                        })\r\n                        .attr(\"r\", function(d) {\r\n                            if (d.Author == dataPoint) {\r\n                              return 10\r\n                            } else {\r\n                              return 8\r\n                            }\r\n                        })\r\n                        .attr(\"stroke-width\", function(d) {\r\n                            if (d.Author == dataPoint) {\r\n                              return \"2px\"\r\n                            } else {\r\n                              return \"0px\"\r\n                            }\r\n                        })\r\n                        .attr(\"stroke\", function(d) {\r\n                            if (d.Author == dataPoint) {\r\n                              return \"#6495ED\"\r\n                            } else {\r\n                              return \"black\"\r\n                            }\r\n                        })\r\n\r\n                } else if (currentlyClicked != \"\" & dataPoint == currentlyClicked) {\r\n\r\n\r\n\r\n                    dot.data(dataFilter)\r\n                              .transition()\r\n                            .duration(300)\r\n                              .attr(\"opacity\", \"70%\")\r\n                              .attr(\"r\", 8)\r\n                              .attr(\"stroke-width\", \"0px\")\r\n\r\n                    currentlyClicked = \"\"\r\n\r\n                }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // When the button is changed, run the updateKeywords function and update the graph\r\n    visKeywordEmphasis.subscribe((selectedOption) => {        \r\n        // run the updateChart function with this selected option\r\n        updateKeywords(selectedOption, $visNumClusters)\r\n        updateDistributions($displayDistributions, selectedOption, $visNumClusters)\r\n\r\n\r\n        $selectedResearchInterest = \"\"\r\n\r\n        legendRect.transition()\r\n                  .duration(1000)\r\n                  .attr(\"opacity\",\"0%\");\r\n\r\n        d3.select('.yAxisLegend').transition()\r\n                                 .duration(1000)\r\n                                 .ease(d3.easeLinear)\r\n                                 .style(\"opacity\", \"0%\");\r\n    })\r\n    \r\n\r\n    // When the button is changed, run the updateClusters function and update the graph\r\n    visNumClusters.subscribe((selectedOption) => {    \r\n      // run the updateChart function with this selected option\r\n      updateClusters(selectedOption, $visKeywordEmphasis)\r\n      updateDistributions($displayDistributions, $visKeywordEmphasis, selectedOption)\r\n\r\n\r\n      $selectedResearchInterest = \"\"\r\n\r\n      legendRect.transition()\r\n                  .duration(1000)\r\n                  .attr(\"opacity\",\"0%\");\r\n\r\n      d3.select('.yAxisLegend').transition()\r\n                               .duration(1000)\r\n                               .ease(d3.easeLinear)\r\n                               .style(\"opacity\", \"0%\");\r\n    })\r\n\r\n\r\n\r\n    // When the button is changed, run the updateNames function and update the graph\r\n    displayNames.subscribe((selectedOption) => {    \r\n      // run the updateNames function with this selected option\r\n      updateNames(selectedOption)\r\n    })\r\n\r\n\r\n    // When the button is changed, run the updateDistributions function and update the graph\r\n    displayDistributions.subscribe((selectedOption) => {    \r\n      \r\n      updateDistributions(selectedOption, $visKeywordEmphasis, $visNumClusters)\r\n      \r\n      if (selectedOption == true) {\r\n          \r\n\r\n          $selectedResearchInterest = \"\"\r\n\r\n          legendRect.transition()\r\n                    .duration(1000)\r\n                    .attr(\"opacity\",\"0%\");\r\n\r\n          d3.select('.yAxisLegend').transition()\r\n                                   .duration(1000)\r\n                                   .ease(d3.easeLinear)\r\n                                   .style(\"opacity\", \"0%\");\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // When a new research query is inputted, update the graph with the new ranking\r\n    selectedResearchInterest.subscribe((value) => {\r\n\r\n      \r\n      if (value == \"\") {\r\n        updateClusters($visNumClusters, $visKeywordEmphasis)\r\n\r\n        legendRect.transition()\r\n                  .duration(1000)\r\n                  .attr(\"opacity\",\"0%\");\r\n\r\n        d3.select('.yAxisLegend').transition()\r\n                                 .duration(1000)\r\n                                 .ease(d3.easeLinear)\r\n                                 .style(\"opacity\", \"0%\");\r\n\r\n        return\r\n\r\n      }\r\n\r\n      var emphasis = $queryKeywordEmphasis;\r\n      if (currentSelectedFacultyRankData[value.toLowerCase()]) {\r\n        $displayDistributions = false\r\n        updateRanking(value.toLowerCase(), emphasis)\r\n      }\r\n\r\n      updateDistributions($displayDistributions, $visKeywordEmphasis, $visNumClusters)\r\n\r\n    })\r\n\r\n    // When a new dataset is selected, update the graph with the new dataset\r\n    datasetChoice.subscribe((value) => {\r\n\r\n      if (value == \"Most Cited Publications\") {\r\n        currentSelectedFaculty = citedCoordinates;\r\n        currentSelectedFacultyRankData = citedResearchQuery;\r\n      } else if (value == \"Most Recent Publications\") {\r\n        currentSelectedFaculty = recentCoordinates;\r\n        currentSelectedFacultyRankData = recentResearchQuery;\r\n      }\r\n\r\n\r\n      $selectedResearchInterest = \"\"\r\n\r\n      updateDataset($visKeywordEmphasis, $visNumClusters)\r\n      updateDistributions($displayDistributions, $visKeywordEmphasis, $visNumClusters)\r\n\r\n      legendRect.transition()\r\n                  .duration(1000)\r\n                  .attr(\"opacity\",\"0%\");\r\n\r\n      d3.select('.yAxisLegend').transition()\r\n                               .duration(1000)\r\n                               .ease(d3.easeLinear)\r\n                               .style(\"opacity\", \"0%\");\r\n\r\n    })\r\n\r\n        \r\n\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n  \r\n  .switch[type=\"checkbox\"].is-small:checked + label::before {\r\n    background: #652DC1;\r\n  }\r\n\r\n</style>\r\n\r\n\r\n\r\n<nav class=\"level\" style=\"padding-top: 0px; margin-top: 0px; padding-bottom: 15px; padding-left: 15px;\">\r\n\r\n  <input id=\"ShowNamesSwitch\" type=\"checkbox\" name=\"ShowNamesSwitch\" \r\n                class=\"switch is-small is-rounded\" style=\"padding-top: 0px; color: purple;\" bind:checked={$displayNames}>\r\n  <label for=\"ShowNamesSwitch\" ></label>\r\n  <p class=\"text is-black\" style=\"width: 105%; padding-top: 14px\">Show All Names</p>\r\n\r\n  <p class=\"text is-black\" style=\"padding-top: 14px;\">#Clusters</p>\r\n  <input id=\"sliderWithValue\" class=\"slider has-output svelte-1v4uv99 is-circle is-purple\" bind:value={$visNumClusters} min=\"1\" max=\"6\" step=\"1\" type=\"range\" style=\"margin-top: 0px;outline: none;border-top-width: 0px;border-right-width: 0px;border-left-width: 0px;border-bottom-width: 0px; width: 150px; padding-top: 37px; fill: #652DC1; padding-right: 25px\">\r\n\r\n  <input id=\"ShowGradientsSwitch\" type=\"checkbox\" name=\"ShowGradientsSwitch\" \r\n                class=\"switch is-small is-rounded\" style=\"padding-top: 0px\" bind:checked={$displayDistributions}>\r\n  <label for=\"ShowGradientsSwitch\" ></label>\r\n  <p class=\"text is-black\" style=\"padding-top: 14px; width: 20%\">Show Gradients</p>\r\n\r\n</nav>",
    "<script>\r\n\r\n  import { selectedResearcherInfo, selectedResearchInterest } from '../stores/MapStore.js'\r\n  var researcherLocked = false;\r\n  var lockedInterest = \"\"\r\n  selectedResearchInterest.subscribe((value) => {\r\n    if (value.length == 0) lockedInterest = \"\";\r\n  })\r\n</script>\r\n\r\n<style>\r\n  .text {\r\n      background: #F8F8F8;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n  }\r\n\r\n  .scholar-keyword:hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  .image-container {\r\n    background: grey;\r\n    background: #E5E5E5;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 150px;\r\n    height: 150px;\r\n    border: 1px solid grey;\r\n    border: 1px solid #E5E5E5;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n  }\r\n  .image-container img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    object-fit: contain;\r\n  }\r\n</style>\r\n\r\n<div class=\"columns is-centered\" style=\"background: #F8F8F8; min-width:410px; cursor: default;\">\r\n  <div class=\"column\">\r\n    <div class=\"photo\" style=\"margin-left: auto; margin-right: auto; width: 45%; display: block; padding-left: 20px; padding-right: 20px; padding-top: 15%\">\r\n      <div class=\"image-container\">\r\n          <img src=\"{$selectedResearcherInfo.pictureURL}\">\r\n      </div>\r\n    </div>\r\n    <div class=\"content\" style=\"min-width: 410px;\">\r\n      <p class=\"text is-size-2 has-text-weight-bold\" style=\"color: #484848; text-align: center; margin-bottom: 0px;\"> {$selectedResearcherInfo.name}  </p>\r\n      <p class=\"text is-size-5\" style=\"color: #484848; text-align: center; margin-bottom: 0px;\"> {$selectedResearcherInfo.affiliation} </p>\r\n\r\n      <p class=\"text is-size-6\" style=\"color: #484848; text-align: center; margin-bottom: 20px\"> \r\n            <span class=\"light-font\" >Citations:</span> {$selectedResearcherInfo.citations} \r\n      </p>\r\n\r\n      <p class=\"text is-size-6\" style=\"color: #484848; text-align: left; margin-bottom: 0px; padding-left: 20%\"> \r\n          <a href= {$selectedResearcherInfo.url} target=\"_blank\" style=\"color: #652DC1;\">Google Scholar </a> keywords\r\n      </p>\r\n\r\n      {#each $selectedResearcherInfo.scholarKeywords as scholarKeyword }\r\n        { #if scholarKeyword.length != 0 }\r\n        <!-- clean this up!!!!!!!!! break it out into seperate functions, etc.-->\r\n        <p style=\"color: #8B72BE; text-align: left; margin-bottom: 0px; {lockedInterest == scholarKeyword ? \"font-weight: bold;\" : \"font-weight: normal;\"} margin-left: 20%\" on:click={() =>{ \r\n          if (lockedInterest.length == 0) \r\n            lockedInterest = scholarKeyword \r\n          else lockedInterest = \"\"\r\n          }} on:mouseenter={() => {selectedResearchInterest.set(scholarKeyword)}} on:mouseleave={() => {selectedResearchInterest.set(lockedInterest)}} class=\"text scholar-keyword is-size-5\"> \r\n          {scholarKeyword} \r\n        </p>\r\n        {/if}\r\n      {/each}\r\n\r\n<!-- selectedResearchInterest.set(\"\") -->\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n",
    "<style>\r\n        .content{\r\n            background: #FFFFFF;\r\n            padding-top: 25px;\r\n            padding-left: 30%;\r\n            padding-right: 30%;\r\n            padding-bottom: 100px;\r\n            line-height: 40px;\r\n        }\r\n</style>\r\n\r\n<div class=\"content\">\r\n  <h1 class=\"text is-size-1\"> What is PeopleMap? </h1>\r\n  <p class=\"text is-size-5\"> PeopleMap is a data visualization tool that uses natural language processing (NLP) to map out researchers through graphical representations, using a variety of textual characteristics related to each researcher, such as college/school of their professorship, laboratory affiliation, titles and abstracts of their papers found on Google Scholar, and Google Scholar keywords.\r\n  </p>\r\n  <p class=\"text is-size-5\"> By analyzing this information through a variety of NLP techniques, such as NMF and TFIDF, we can get a better understanding of the topics and focuses related to the variety of academic researchers at Georgia Tech. These connections and groups can, in turn, be visualized through a graphical system of nodes and edges that builds a more intuitive image of the researchers, which helps external groups, as well as individuals at Georgia Tech, understand our vast academic diversity better.\r\n  </p>\r\n  <h1 class=\"text is-size-3\"> Mapping Out Researchers </h1>\r\n  <p class=\"text is-size-5\"> The central graph visualizes each researcher’s publications in relation to all other researchers. Through the use of TFIDF matrices, which take into account both the frequency and occurrence of specific words in the publications, the researchers’ works can be analyzed and converted into high-dimensional vectors that can be visualized. \r\n  </p>\r\n  <p class=\"text is-size-5\"> The five controls added to the left of the visualization each configure a different feature of the generated graph:\r\n  </p>\r\n  <ul class=\"text is-size-5\">\r\n    <li> <u>Keywords Weight:</u> This slider allows you to affect the weight placed on each researcher’s Google Scholar keywords when constructing their vectorizations. The more emphasis placed on their keywords, the more closely they are aligned with the words they use to describe their own work. Placing the slider furthest to the left puts no emphasis on their Google Scholar keywords while placing the slider furthest to the right puts a great deal of emphasis.\r\n    </li>\r\n    <li> <u>#Clusters:</u> This slider allows you to determine the total number of clusters used to split the researchers. More clusters leads to a higher coherence within each cluster but also can lead to fairly arbitrary splits; a good balance is to pick a cluster value that optimizes both coherence and logical cluster divisions.\r\n    </li>\r\n    <li> <u>Display Gradient:</u> This toggle reveals the different Gaussian distributions that generate the clusters in the visualization. Each gradient represents a separate standard distribution in the Gaussian mixture model of the visualization. The gradient extends out three standard deviations in each direction of its axes.\r\n    </li>\r\n    <li> <u>Display Names:</u> This toggle simply displays the name of each researcher adjacent to their respective vertex in the graph\r\n    </li>\r\n    <li> <u>Publication Set:</u> This dropdown allows the user to select which dataset to load into the visualization. With the \"Most Cited Publications\" choice, the fifty most cited publications of each researcher will be used in generating their visualization. With the \"Most Recent Publications\" choice, the fifty most recent publications of each researcher will be used in generating their visualization. \r\n    </li>\r\n  </ul> \r\n  <h1 class=\"text is-size-3\"> Querying a Research Topic </h1>\r\n  <p class=\"text is-size-5\"> The top-right search bar allows you to find what researchers are most closely aligned with a queried research topic based on both their research work and their Google Scholar research keywords. We use the TFIDF vectors once again but instead use them to score similarity and determine which researchers are most closely aligned with a selected research topic.\r\n  </p>\r\n  <p class=\"text is-size-5\"> The toggle located to the left of the query itself:\r\n  </p>\r\n  <ul class=\"text is-size-5\">\r\n    <li> <u>Keywords Emphasis:</u> This slider allows you to affect the weight placed on each researcher’s Google Scholar keywords when querying for a specific topic. The higher the value is, the more emphasis placed on their keywords, the more closely they are aligned with their chosen topics. Therefore, if you’d like no emphasis placed on them, set the slider to the leftmost point so it will only focus on a researcher’s publications when determining their scoring for the queried topic. Conversely, if you’d like heavy emphasis placed on the keywords, set the slider to the rightmost point so it will weigh a researcher’s chosen keywords when determining their scoring for the queried topic.\r\n    </li>\r\n  </ul>\r\n</div>",
    "<style>\r\n\r\n    .level{\r\n            background: #652DC1;\r\n        }\r\n\r\n    .panel-block:hover {\r\n      text-decoration: none;\r\n    }\r\n\r\n</style>\r\n\r\n<script>\r\n\r\n  import { queryKeywordEmphasis, selectedResearchInterest, datasetChoice } from '../stores/MapStore.js'\r\n  import \"string_score\";\r\n  import citedRankData from './citedResearchQuery.js'\r\n  import recentRankData from './recentResearchQuery.js'\r\n  import citedCoordinates from './citedCoordinates.js'\r\n\r\n  var newRankData = {}\r\n  var fixedKeys = []\r\n\r\n\r\n  datasetChoice.subscribe((value) => {\r\n    if (value == \"Most Cited\") {\r\n      newRankData = citedRankData\r\n    } else {\r\n      newRankData = recentRankData\r\n    }\r\n\r\n    fixedKeys = Object.keys(newRankData).map((key) => \r\n      key.split(\" \").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(\" \")\r\n    )\r\n  })\r\n\r\n  var choices = []\r\n\r\n  selectedResearchInterest.subscribe((val) => {\r\n    choices = fixedKeys.sort((a, b) => b.score(val) - a.score(val)).slice(0, 5)\r\n  })\r\n\r\n  var handleInterestSelect = (choice) => {\r\n    selectedResearchInterest.set(choice)\r\n  }\r\n\r\n  var handleKeydown = () => {\r\n    var key = event.key;\r\n    var keyCode = event.keyCode;\r\n    if (keyCode == 13) {\r\n      selectedResearchInterest.set(choices[0])\r\n    }\r\n  }\r\n\r\n  var onFocus = () => {\r\n    var input = document.getElementById(\"autocomplete-input\")\r\n    var choices = document.getElementById(\"autocomplete-choices\")\r\n    choices.style.top = input.getBoundingClientRect().top + 50 + \"px\";\r\n    choices.style.left = input.getBoundingClientRect().left + \"px\";\r\n    choices.style.width = input.getBoundingClientRect().width + \"px\";\r\n\r\n    choices.style.visibility = \"visible\";\r\n\r\n  }\r\n\r\n  var onBlur = () => {\r\n    var choices = document.getElementById(\"autocomplete-choices\")\r\n    choices.style.top = \"1000px\";\r\n    choices.style.left = \"1000px\";\r\n    choices.style.visibility = \"hidden\";\r\n  }\r\n\r\n</script>\r\n\r\n<nav style=\"padding:10px;margin-bottom:0;padding-bottom:20px;\" class=\"level\">\r\n\r\n  <div class=\"flex-2\" style=\"flex-2: flex-direction; row; justify-content: flex-start;\">\r\n\r\n    <div class=\"level-left\">\r\n      <img src=\"./logo.png\" style=\"width: 50px%; height: 50px; padding-right: 10px;\">\r\n      <p class=\"text has-text-white\" style=\"font-size: 30px; font-weight: lighter; padding-right: 10px;\">\r\n          for\r\n      </p>\r\n      <p class=\"text has-text-white\" style=\"font-size: 30px; padding-right: 25px; padding-right: 30px;\">\r\n          Georgia Tech IDEaS\r\n      </p>\r\n\r\n\r\n      <div class=\"level-item has-text-centered\" aria-label=\"Scholars Analyzed\" data-balloon-pos=\"down\" style=\"padding-right: 20px;\">\r\n        <p class=\"text has-text-white\" style=\"opacity: 75%; padding-right: 5px; font-size: 1.8rem;\">{citedCoordinates.length}</p>\r\n        <i class=\"fas fa-child fa-2x\" style=\"color: white; opacity: 75%;\"></i>\r\n      </div>\r\n\r\n      <div class=\"level-item has-text-centered\" aria-label=\"Keywords Analyzed\" data-balloon-pos=\"down\">\r\n        <p class=\"text has-text-white\" style=\"opacity: 75%; padding-right: 5px; font-size: 1.8rem;\">{(Object.keys(citedRankData)).length}</p>\r\n        <i class=\"fas fa-atom fa-2x\" style=\"color: white; opacity: 75%;\"></i>\r\n      </div>\r\n\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n  <div class=\"panel-block\" style=\"padding-left: 0px; border: 0px solid white; padding-right: 10px;\">\r\n    <p class=\"control has-icons-left\" style=\"padding-right: 10px;\">\r\n      <input class=\"input\" id=\"autocomplete-input\" type=\"text\" style=\"width: 350px;\" \r\n        on:keydown={handleKeydown}\r\n        on:focus={onFocus} on:blur={onBlur}\r\n        bind:value={$selectedResearchInterest} placeholder=\"Query a Researcher or Research Topic\">\r\n      <span class=\"icon is-left\">\r\n        <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\r\n      </span>\r\n    </p>\r\n\r\n    <a \r\n    on:click={() => {\r\n      selectedResearchInterest.set(\"\")\r\n    }}\r\n    class=\"delete is-large\"></a>\r\n\r\n  </div>\r\n\r\n\r\n\r\n</nav>\r\n\r\n<div id=\"autocomplete-choices\" style=\"visibility: hidden; top: 1000px; left: 1000px; z-index: 100; position: absolute; width: 300px; background: white;\">\r\n  {#each choices as choice}\r\n    <a on:mousedown = {() => { handleInterestSelect(choice) }} class=\"panel-block\">\r\n      <span class=\"panel-icon\">\r\n        <i class=\"fas fa-book\" aria-hidden=\"true\"></i>\r\n      </span>\r\n      {choice}\r\n    </a>\r\n  {/each}\r\n</div>\r\n\r\n",
    "<style>\r\n        .level{\r\n            background: #652DC1;\r\n        }\r\n\r\n        .dropdown-item:hover {\r\n            \r\n            text-decoration-color: white;\r\n\r\n        }\r\n</style>\r\n\r\n\r\n<script>\r\n\r\n    import {queryKeywordEmphasis, visKeywordEmphasis, visNumClusters, displayNames, displayDistributions, datasetChoice} from '../stores/MapStore.js'\r\n\r\n    var dropdownShownDataset = false;\r\n    var dropdownShownEmphasis = false;\r\n\r\n    const selectionClickedDataset = (selection) => {\r\n      dropdownShownDataset = !dropdownShownDataset;\r\n      if (selection) {\r\n        datasetChoice.set(selection)\r\n      }\r\n    }\r\n\r\n    const selectionClickedEmphasis = (selection) => {\r\n\r\n      var adjustedSelection = selection + 1\r\n      dropdownShownEmphasis = !dropdownShownEmphasis;\r\n      if (adjustedSelection) {\r\n        visKeywordEmphasis.set(adjustedSelection - 1)\r\n      }\r\n    }\r\n\r\n    function displayAdjective(number) {\r\n\r\n      if (number == 0) {\r\n        return \"No\"\r\n      } else if (number == 1) {\r\n        return \"Minimal\"\r\n      } else if (number == 2) {\r\n        return \"Small\"\r\n      } else if (number == 3) {\r\n        return \"Moderate\"\r\n      } else if (number == 4) {\r\n        return \"Strong\"\r\n      } else if (number == 5) {\r\n        return \"Maximal\"\r\n      } else {\r\n        return \"Not labeled\"\r\n      }\r\n    }\r\n\r\n</script>\r\n\r\n\r\n<nav style=\"margin-bottom:0;padding-bottom:10px; padding-top:10px;\" class=\"level\">\r\n\r\n  <div class=\"level-left\">\r\n    <div class=\"level-item\" style=\"margin-right: 0px\">\r\n      <p class=\"text has-text-white\" style=\"font-size: 20px; padding-left: 20px; margin-right: 0px; padding-right: 8px;\">\r\n          Create map based on \r\n      </p>\r\n    </div>\r\n    <div class=\"level-item\" style=\"overflow: visible; margin-right: 0px; padding-right: 8px;\">\r\n        <div class=\"dropdown is-up {dropdownShownDataset ? 'is-active' : ''}\" style=\"padding-left: 2%;\">\r\n          <div class=\"dropdown-trigger\" style=\"background-color: #8B72BE; border-radius: 10px;\">\r\n            <button class=\"button\" style=\"background-color: #8B72BE; border: 0px solid white; border-radius: 15px; padding-left: 6px; padding-right: 6px;\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu\" on:click={() => { selectionClickedDataset(); }}>\r\n              <span style=\"color: white; font-size: 20px;\">{$datasetChoice}</span>\r\n              <span class=\"icon is-small\" style=\"padding-right: 5px;\">\r\n                <i class=\"fas fa-angle-up fa-2x\" style=\"color: white; padding-left: 3px; padding-right: 8px;\" aria-hidden=\"true\"></i>\r\n              </span>\r\n            </button>\r\n          \r\n          </div>\r\n          <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\r\n            <div class=\"dropdown-content\" style=\"background-color: #8B72BE;\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedDataset(\"Most Cited Publications\"); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\">Most Cited Publications</p>\r\n              </a>\r\n              <hr class=\"dropdown-divider\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedDataset(\"Most Recent Publications\"); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\">Most Recent Publications</p>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    <div class=\"level-item\" style=\"margin-right: 0px; padding-right: 8px;\">\r\n      <p class=\"text has-text-white\" style=\"font-size: 20px;\">\r\n          with\r\n      </p>\r\n    </div>\r\n    <div class=\"level-item\" style=\"overflow: visible; margin-right: 0px; padding-right: 8px;\">\r\n        <div class=\"dropdown is-up {dropdownShownEmphasis ? 'is-active' : ''}\" style=\"padding-left: 2%;\">\r\n          <div class=\"dropdown-trigger\" style=\"background-color: #8B72BE; border-radius: 10px;\">\r\n            <button class=\"button\" aria-haspopup=\"true\" style=\"background-color: #8B72BE; border: 0px solid white; border-radius: 15px; padding-left: 6px; padding-right: 6px;\" aria-controls=\"dropdown-menu\" on:click={() => { selectionClickedEmphasis(); }}>\r\n              <span style=\"color: white; font-size: 20px;\">{displayAdjective($visKeywordEmphasis)}</span>\r\n              <span class=\"icon is-medium\" style=\"padding-right: 5px;\">\r\n                <i class=\"fas fa-angle-up fa-2x\" style=\"color: white; padding-left: 3px; padding-right: 8px;\" aria-hidden=\"true\"></i>\r\n              </span>\r\n            </button>\r\n          \r\n          </div>\r\n          <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\r\n            <div class=\"dropdown-content\" style=\"background-color: #8B72BE; width: 150px;\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(0); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\">No</p>\r\n              </a>\r\n              <hr class=\"dropdown-divider\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(1); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Minimal</p>\r\n              </a>\r\n              <hr class=\"dropdown-divider\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(2); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Small</p>\r\n              </a>\r\n              <hr class=\"dropdown-divider\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(3); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Moderate</p>\r\n              </a>\r\n              <hr class=\"dropdown-divider\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(4); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Strong</p>\r\n              </a>\r\n              <hr class=\"dropdown-divider\">\r\n              <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(5); }}>\r\n                <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Maximal</p>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    <div class=\"level-item\">\r\n      <p class=\"text has-text-white\" style=\"font-size: 20px\">\r\n          emphasis on people's research areas specified on Google Scholar.\r\n      </p>\r\n    </div>\r\n\r\n\r\n  </div>\r\n\r\n</nav>"
  ],
  "names": [],
  "mappings": "AAUQ,sBAAQ,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,cAAc,CAAE,GAAG,AACvB,CAAC;AC+kCP,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,QAAQ,CAAG,mBAAK,QAAQ,AAAC,CAAC,AACzD,UAAU,CAAE,OAAO,AACrB,CAAC;ACrlCD,KAAK,8BAAC,CAAC,AACH,UAAU,CAAE,OAAO,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AAC3B,CAAC,AAED,8CAAgB,MAAM,AAAC,CAAC,AACtB,eAAe,CAAE,SAAS,AAC5B,CAAC,AAED,gBAAgB,8BAAC,CAAC,AAChB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,MAAM,AAClB,CAAC,AACD,+BAAgB,CAAC,GAAG,eAAC,CAAC,AACpB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,OAAO,AACrB,CAAC;ACtCK,sBAAQ,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,cAAc,CAAE,KAAK,CACrB,WAAW,CAAE,IAAI,AACrB,CAAC;ACNL,qBAAM,CAAC,AACC,UAAU,CAAE,OAAO,AACvB,CAAC,AAEL,2BAAY,MAAM,AAAC,CAAC,AAClB,eAAe,CAAE,IAAI,AACvB,CAAC;ACPG,qBAAM,CAAC,AACH,UAAU,CAAE,OAAO,AACvB,CAAC,AAED,6BAAc,MAAM,AAAC,CAAC,AAElB,qBAAqB,CAAE,KAAK,AAEhC,CAAC"
}