{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../ResearcherDetailView.svelte",
    "../../SummaryView.svelte",
    "../../StatsView.svelte",
    "../../ToggleRow.svelte",
    "../../PeopleMapView.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import PeopleMapView from './components/PeopleMapView.svelte'\n  import ResearcherDetailView from './components/ResearcherDetailView.svelte'\n  import StatsView from './components/StatsView.svelte'\n  import SummaryView from './components/SummaryView.svelte'\n  import ToggleRow from './components/ToggleRow.svelte'\n\n</script>\n\n<style>\n        .columns{\n            background: #F8F8F8;\n            padding-left: 30px;\n            padding-right: 30px;\n            padding-bottom: 0px;\n        }\n</style>\n\n<StatsView />\n<!-- <SettingsView /> -->\n<div class=\"columns is-mobile\" style=\"margin-top: 0px; padding-top: 0px; margin-bottom: 0px; padding-left: 0px; padding-right: 0px; min-width: 1300px; width:1340px; margin-left:auto; margin-right: auto;\">\n  <div class=\"column\" style=\"min-height: 625px; padding-bottom: 35px; margin-bottom: 0px; background: #FFFFFF; padding-right: 0px; padding-left: 0px; margin-left: 0px; margin-right: 0px; width: 100%; padding-top: 0px;\">\n    <PeopleMapView />\n  </div>\n  <div class=\"column is-narrow\" style=\"padding-right: 20px; margin: 0px; padding-left: 18px;\">\n    <div class=\"level-item\" style=\"width: 400px;\">\n      <ResearcherDetailView />\n    </div>\n  </div>\n</div>\n<ToggleRow />\n<SummaryView />",
    "<script>\n\n  import { selectedResearcherInfo, selectedResearchInterest } from '../stores/MapStore.js'\n  var researcherLocked = false;\n  var lockedInterest = \"\"\n  selectedResearchInterest.subscribe((value) => {\n    if (value.length == 0) lockedInterest = \"\";\n  })\n\n</script>\n\n<style>\n  .text {\n      background: #F8F8F8;\n      overflow: hidden;\n      text-overflow: ellipsis;\n  }\n\n  .scholar-keyword:hover {\n    text-decoration: underline;\n  }\n\n  .image-container {\n    background: grey;\n    background: #E5E5E5;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 150px;\n    height: 150px;\n    border: 1px solid grey;\n    border: 1px solid #E5E5E5;\n    border-radius: 50%;\n    overflow: hidden;\n  }\n  .image-container img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    object-fit: contain;\n  }\n</style>\n\n<div style=\"background: #F8F8F8;\">\n\n  <div class=\"columns is-centered\" style=\"background: #F8F8F8; min-width:410px; cursor: default;\">\n    <div class=\"column\">\n      <div class=\"photo\" style=\"margin-left: auto; margin-right: auto; width: 45%; display: block; padding-left: 20px; padding-right: 20px; padding-top: 15%\">\n        <div class=\"image-container\">\n            <img src=\"{$selectedResearcherInfo.pictureURL}\">\n        </div>\n      </div>\n      <div class=\"content\" style=\"min-width: 410px;\">\n        <p class=\"text is-size-2 has-text-weight-bold\" style=\"color: #484848; text-align: center; margin-bottom: 0px;\"> {$selectedResearcherInfo.name}  </p>\n        <p class=\"text is-size-5\" style=\"color: #484848; text-align: center; margin-bottom: 0px;\"> {$selectedResearcherInfo.affiliation} </p>\n\n        <p class=\"text is-size-6\" style=\"color: #484848; text-align: center; margin-bottom: 20px\"> \n              <span class=\"light-font\" >Citations:</span> {parseInt($selectedResearcherInfo.citations)} \n        </p>\n\n        <p class=\"text is-size-6\" style=\"color: #484848; text-align: left; margin-bottom: 0px; padding-left: 20%\"> \n            <a href= {$selectedResearcherInfo.url} target=\"_blank\" style=\"color: #652DC1;\">Google Scholar </a> keywords\n        </p>\n\n        {#each $selectedResearcherInfo.scholarKeywords as scholarKeyword }\n          { #if scholarKeyword.length != 0 }\n          \n          <p style=\"cursor: pointer; color: #8B72BE; text-align: left; margin-bottom: 0px; {lockedInterest == scholarKeyword ? \"font-weight: bold;\" : \"font-weight: normal;\"} margin-left: 20%\" on:click={() =>{ \n            if (lockedInterest.length == 0) \n              lockedInterest = scholarKeyword \n            else lockedInterest = \"\"\n            }} on:mouseenter={() => {selectedResearchInterest.set(scholarKeyword)}} on:mouseleave={() => {selectedResearchInterest.set(lockedInterest)}} class=\"text scholar-keyword is-size-5\"> \n            {scholarKeyword} \n          </p>\n          {/if}\n        {/each}\n\n  <!-- selectedResearchInterest.set(\"\") -->\n\n      </div>\n    </div>\n  </div>\n  \n</div>\n\n",
    "<style>\n        .content{\n            background: #FFFFFF;\n            padding-top: 25px;\n            padding-left: 30%;\n            padding-right: 30%;\n            padding-bottom: 100px;\n            line-height: 40px;\n        }\n</style>\n\n<div class=\"content\">\n  <h1 class=\"text is-size-1\"> What is PeopleMap? </h1>\n  <p class=\"text is-size-5\"> Discovering research expertise at institutions can be a difficult task. Manually curated university directories easily become out of date and often lack the information necessary to understand a researcher’s interests and past work, making it harder to explore the diversity of research at an institution and pinpoint potential collaborators, resulting in lost opportunities for both internal and external entities to discover new connections and nurture research collaboration.\n  </p>\n  <p class=\"text is-size-5\"> To solve this problem, we have developed PeopleMap, the first interactive, open-source, web-based tool that visually “maps out”researchers based on their research interests and publications by leveraging embeddings generated by natural language processing (NLP) techniques. PeopleMap provides a new engaging way for institutions to summarize their research talents and for people to discover new connections. PeopleMap is developed with ease-of-use and sustainability in mind. Using only researchers’ Google Scholar profiles as input, PeopleMap can be readily adopted by any institution using its publicly-accessible repository and detailed documentation.\n  </p>\n  <p class=\"text is-size-5\"> To access the Github repository for PeopleMap, click the following link:\n  </p>\n  <ul class=\"text is-size-5\">\n    <li> <a href=\"https://github.com/poloclub/people-map\" target=\"_blank\" style=\"color: #652DC1;\">PeopleMap Repository</a>\n    </li>\n  </ul>\n  <p class=\"text is-size-5\"> To access the documentation for PeopleMap, click the following link:\n  </p>\n  <ul class=\"text is-size-5\">\n    <li> <a href=\"https://app.gitbook.com/@poloclub/s/people-map/\" target=\"_blank\" style=\"color: #652DC1;\">PeopleMap Documentation</a>\n    </li>\n  </ul>\n  <p class=\"text is-size-5\"> PeopleMap is brought to you by: <a href=\"https://www.linkedin.com/in/jonsaadfalcon/\" target=\"_blank\" style=\"color: #652DC1;\">Jon Saad-Falcon</a>, <a href=\"https://www.linkedin.com/in/oshaikh13/\" target=\"_blank\" style=\"color: #652DC1;\">Omar Shaikh</a>, <a href=\"https://zijie.wang/\" target=\"_blank\" style=\"color: #652DC1;\">Jay Wang</a>, <a href=\"https://austinpwright.com/\" target=\"_blank\" style=\"color: #652DC1;\">Austin Wright</a>, <a href=\"https://www.linkedin.com/in/sasha-richardson/\" target=\"_blank\" style=\"color: #652DC1;\">Sasha Richardson</a>, and <a href=\"https://poloclub.github.io/polochau/\" target=\"_blank\" style=\"color: #652DC1;\">Polo Chau</a>.\n  </p>\n</div>",
    "<style>\n\n    .level{\n      background: #652DC1;\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n    }\n\n    .panel-block:hover {\n      text-decoration: none;\n    }\n\n</style>\n\n<script>\n\n  import { queryKeywordEmphasis, selectedResearchInterest, datasetChoice } from '../stores/MapStore.js'\n  import \"string_score\";\n  import citedRankData from './citedResearchQuery.js'\n  import recentRankData from './recentResearchQuery.js'\n  import citedCoordinates from './citedCoordinates.js'\n\n  var newRankData = {}\n  var fixedKeys = []\n  var authors = {}\n\n\n\n  citedCoordinates.forEach((curr) => { \n    authors[curr[\"Author\"]] = true;\n  })\n  \n\n\n  datasetChoice.subscribe((value) => {\n    if (value == \"Most Cited\") {\n      newRankData = citedRankData\n    } else {\n      newRankData = recentRankData\n    }\n\n    fixedKeys = Object.keys(newRankData).map((key) => {\n      var name = key.split(\" \").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n      var type = \"interest\"\n      return {name, type};\n    })\n    \n    for (var key in authors) {\n      fixedKeys.push({name: key, type: \"author\"})\n    }\n  })\n\n  var choices = []\n\n  selectedResearchInterest.subscribe((val) => {\n    choices = fixedKeys.sort((a, b) => b[\"name\"].score(val) - a[\"name\"].score(val)).slice(0, 5)\n  })\n\n  var handleInterestSelect = (choice) => {\n    selectedResearchInterest.set(choice)\n  }\n\n  var handleKeydown = () => {\n    var key = event.key;\n    var keyCode = event.keyCode;\n\n    if (keyCode == 13) {\n\n      selectedResearchInterest.set(choices[0][\"name\"])\n    }\n  }\n\n  var onFocus = () => {\n    var input = document.getElementById(\"autocomplete-input\")\n    var choices = document.getElementById(\"autocomplete-choices\")\n    choices.style.top = input.getBoundingClientRect().top + 50 + \"px\";\n    choices.style.left = input.getBoundingClientRect().left + \"px\";\n    choices.style.width = input.getBoundingClientRect().width + \"px\";\n\n    choices.style.visibility = \"visible\";\n\n  }\n\n  var onBlur = () => {\n    var choices = document.getElementById(\"autocomplete-choices\")\n    choices.style.top = \"1000px\";\n    choices.style.left = \"1000px\";\n    choices.style.visibility = \"hidden\";\n  }\n\n</script>\n\n<div style=\"background-color: #652DC1;\">\n\n<nav class=\"level is-mobile\" style=\"padding: 10px 10px; margin-bottom: 0px; width:1340px; margin-left:auto; margin-right: auto;\">\n\n  <div class=\"flex-2\" style=\"flex-2: flex-direction; row; justify-content: flex-start; min-width: 820px;\">\n\n    <div class=\"level-left\">\n      <img src=\"./logo.png\" style=\"width: 50px%; height: 50px; margin-right: 10px;\">\n      <p class=\"text has-text-white\" style=\"font-size: 30px; padding-right: 25px; padding-right: 30px; min-width: 400px;\">\n        South Big Data Innovation Hub\n      </p>\n\n\n      <div class=\"level-item has-text-centered\" aria-label=\"Scholars Analyzed\" data-balloon-pos=\"down\" style=\"padding-right: 20px; margin-right: 0px; min-width: 65px;\">\n        <p class=\"text has-text-white\" style=\"opacity: 75%; padding-right: 5px; font-size: 1.8rem;\">{citedCoordinates.length}</p>\n        <i class=\"fas fa-child fa-2x\" style=\"color: white; opacity: 75%;\"></i>\n      </div>\n\n      <div class=\"level-item has-text-centered\" aria-label=\"Keywords Analyzed\" data-balloon-pos=\"down\" style=\"min-width: 85px; padding-right: 10px;\">\n        <p class=\"text has-text-white\" style=\"opacity: 75%; padding-right: 5px; font-size: 1.8rem;\">{(Object.keys(citedRankData)).length}</p>\n        <i class=\"fas fa-atom fa-2x\" style=\"color: white; opacity: 75%;\"></i>\n      </div>\n\n  </div>\n\n</div>\n\n\n\n\n  <div class=\"panel-block\" style=\"padding-left: 0px; border: 0px solid white; padding-left: 10px; padding-right: 10px; min-width: 300px; overflow: visible;\">\n    <p class=\"control has-icons-left\" style=\"padding-right: 10px;\">\n      <input class=\"input\" id=\"autocomplete-input\" type=\"text\" style=\"width: 320px;\" \n        on:keydown={handleKeydown}\n        on:focus={onFocus} on:blur={onBlur}\n        bind:value={$selectedResearchInterest} placeholder=\"Query a Researcher or Area of Study\">\n      <span class=\"icon is-left\">\n        <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\n      </span>\n    </p>\n\n    <a \n    on:click={() => {\n      selectedResearchInterest.set(\"\")\n    }}\n    class=\"delete is-large\" style=\"padding-right: 15px;\"></a>\n\n    <a href= https://github.com/poloclub/people-map target=\"_blank\" style=\"color: white; margin-left: 20px; padding-top: 12px;\">\n        <span class=\"icon is-small\">\n          <i class=\"fab fa-github fa-2x\"></i>\n        </span>\n    </a>\n\n  </div>\n\n\n\n</nav>\n <!-- on:mouseleave={() => {handleInterestSelect(\"\")}} -->\n<!-- on:mouseenter={() => {handleInterestSelect(choice[\"name\"])}} -->\n<div id=\"autocomplete-choices\" style=\"visibility: hidden; top: 100px; left: 100px; z-index: 100; position: absolute; width: 300px; background: white;\">\n  {#each choices as choice}\n    <a class=\"panel-block\" on:mousedown = {() => { handleInterestSelect(choice[\"name\"])}}>\n      <span class=\"panel-icon\">\n        <div>\n            <i class=\"fas {choice[\"type\"] == \"author\" ? \"fa-user-graduate\" : \"fa-book\"}\" aria-hidden=\"true\"></i>\n            \n        </div>\n      </span>\n      {choice[\"name\"]}\n    </a>\n  {/each}\n</div>\n\n</div>",
    "<style>\n        .level{\n            background: #652DC1;\n        }\n\n        .dropdown-item:hover {\n            \n            text-decoration-color: white;\n\n        }\n</style>\n\n\n<script>\n\n    import {queryKeywordEmphasis, visKeywordEmphasis, visNumClusters, displayNames, displayDistributions, datasetChoice} from '../stores/MapStore.js'\n\n    var dropdownShownDataset = false;\n    var dropdownShownEmphasis = false;\n\n    const selectionClickedDataset = (selection) => {\n      dropdownShownDataset = !dropdownShownDataset;\n      if (selection) {\n        datasetChoice.set(selection)\n      }\n    }\n\n    const selectionClickedEmphasis = (selection) => {\n\n      var adjustedSelection = selection + 1\n      dropdownShownEmphasis = !dropdownShownEmphasis;\n      if (adjustedSelection) {\n        visKeywordEmphasis.set(adjustedSelection - 1)\n      }\n    }\n\n    function displayAdjective(number) {\n\n      if (number == 0) {\n        return \"No\"\n      } else if (number == 1) {\n        return \"Mild\"\n      } else if (number == 3) {\n        return \"Moderate\"\n      } else if (number == 5) {\n        return \"Strong\"\n      } else {\n        return \"Not labeled\"\n      }\n    }\n\n</script>\n\n<div style=\"background-color: #652DC1;\">\n\n    <nav class=\"level is-mobile\" style=\"padding: 10px 10px; margin-bottom: 0px; width:1340px; margin-left:auto; margin-right: auto;\">\n\n      <div class=\"level-left\">\n        <div class=\"level-item\" style=\"margin-right: 0px\">\n          <p class=\"text has-text-white\" style=\"font-size: 20px; padding-left: 20px; margin-right: 0px; padding-right: 8px;\">\n              Create map based on \n          </p>\n        </div>\n        <div class=\"level-item\" style=\"overflow: visible; margin-right: 0px; padding-right: 8px;\">\n            <div class=\"dropdown is-up {dropdownShownDataset ? 'is-active' : ''}\" style=\"padding-left: 2%;\">\n              <div class=\"dropdown-trigger\" style=\"background-color: #8B72BE; border-radius: 10px;\">\n                <button class=\"button\" style=\"background-color: #8B72BE; border: 0px solid white; border-radius: 15px; padding-left: 6px; padding-right: 6px;\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu\" on:click={() => { selectionClickedDataset(); }}>\n                  <span style=\"color: white; font-size: 20px;\">{$datasetChoice}</span>\n                  <span class=\"icon is-small\" style=\"padding-right: 5px;\">\n                    <i class=\"fas fa-angle-up fa-2x\" style=\"color: white; padding-left: 3px; padding-right: 8px;\" aria-hidden=\"true\"></i>\n                  </span>\n                </button>\n              \n              </div>\n              <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n                <div class=\"dropdown-content\" style=\"background-color: #8B72BE;\">\n                  <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedDataset(\"Most Cited Publications\"); }}>\n                    <p style=\"color: white; font-size: 15px; background: #8B72BE;\">Most Cited Publications</p>\n                  </a>\n                  <hr class=\"dropdown-divider\">\n                  <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedDataset(\"Most Recent Publications\"); }}>\n                    <p style=\"color: white; font-size: 15px; background: #8B72BE;\">Most Recent Publications</p>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        <div class=\"level-item\" style=\"margin-right: 0px; padding-right: 8px;\">\n          <p class=\"text has-text-white\" style=\"font-size: 20px;\">\n              with\n          </p>\n        </div>\n        <div class=\"level-item\" style=\"overflow: visible; margin-right: 0px; padding-right: 8px;\">\n            <div class=\"dropdown is-up {dropdownShownEmphasis ? 'is-active' : ''}\" style=\"padding-left: 2%;\">\n              <div class=\"dropdown-trigger\" style=\"background-color: #8B72BE; border-radius: 10px;\">\n                <button class=\"button\" aria-haspopup=\"true\" style=\"background-color: #8B72BE; border: 0px solid white; border-radius: 15px; padding-left: 6px; padding-right: 6px;\" aria-controls=\"dropdown-menu\" on:click={() => { selectionClickedEmphasis(); }}>\n                  <span style=\"color: white; font-size: 20px;\">{displayAdjective($visKeywordEmphasis)}</span>\n                  <span class=\"icon is-medium\" style=\"padding-right: 5px;\">\n                    <i class=\"fas fa-angle-up fa-2x\" style=\"color: white; padding-left: 3px; padding-right: 8px;\" aria-hidden=\"true\"></i>\n                  </span>\n                </button>\n              \n              </div>\n              <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n                <div class=\"dropdown-content\" style=\"background-color: #8B72BE; width: 150px;\">\n                  <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(0); }}>\n                    <p style=\"color: white; font-size: 15px; background: #8B72BE;\">No</p>\n                  </a>\n                  <hr class=\"dropdown-divider\">\n                  <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(1); }}>\n                    <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Mild</p>\n                  </a>\n                  <hr class=\"dropdown-divider\">\n                  <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(3); }}>\n                    <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Moderate</p>\n                  </a>\n                  <hr class=\"dropdown-divider\">\n                  <a class=\"dropdown-item\" style=\"background: #8B72BE;\" on:click={() => { selectionClickedEmphasis(5); }}>\n                    <p style=\"color: white; font-size: 15px; background: #8B72BE;\" >Strong</p>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        <div class=\"level-item\">\n          <p class=\"text has-text-white\" style=\"font-size: 20px\">\n              emphasis on people's research areas specified on Google Scholar.\n          </p>\n        </div>\n\n\n      </div>\n\n    </nav>\n\n</div>\n\n",
    "<div id=\"PeopleMap\" style = \"width: 100%; height: 100%; background: #FFFFFF; \"></div>\n\n<script>\n\nimport cov from \"compute-covariance\";\nimport SingularValueDecomposition from 'svd-js';\n\nimport citedCoordinates from './citedCoordinates.js'\nimport recentCoordinates from './recentCoordinates.js'\n\nimport citedResearchQuery from './citedResearchQuery.js'\nimport recentResearchQuery from './recentResearchQuery.js'\n\nimport citedClusters from './citedClusters.js'\nimport recentClusters from './recentClusters.js'\n\n\n\n// Merge the data between citedCoordinates and citedClusters\nfor (var i = 0; i < citedClusters.length; i++) {\n\n  citedCoordinates[i][\"grouping1,0\"] = citedCoordinates[i][\"grouping1\"]\n  citedCoordinates[i][\"grouping2,0\"] = citedCoordinates[i][\"grouping2\"]\n  citedCoordinates[i][\"grouping3,0\"] = citedCoordinates[i][\"grouping3\"]\n  citedCoordinates[i][\"grouping4,0\"] = citedCoordinates[i][\"grouping4\"]\n  citedCoordinates[i][\"grouping5,0\"] = citedCoordinates[i][\"grouping5\"]\n  citedCoordinates[i][\"grouping6,0\"] = citedCoordinates[i][\"grouping6\"]\n\n\n  for (var k = 1; k <= 10; k++) {\n      citedCoordinates[i][\"grouping1,\" + k] = citedClusters[i][\"grouping1,\" + k]\n      citedCoordinates[i][\"grouping2,\" + k] = citedClusters[i][\"grouping2,\" + k]\n      citedCoordinates[i][\"grouping3,\" + k] = citedClusters[i][\"grouping3,\" + k]\n      citedCoordinates[i][\"grouping4,\" + k] = citedClusters[i][\"grouping4,\" + k]\n      citedCoordinates[i][\"grouping5,\" + k] = citedClusters[i][\"grouping5,\" + k]\n      citedCoordinates[i][\"grouping6,\" + k] = citedClusters[i][\"grouping6,\" + k]\n  }\n}\n\n\n\n// Merge the data between recentCoordinates and recentClusters\nfor (var i = 0; i < recentClusters.length; i++) {\n\n  recentCoordinates[i][\"grouping1,0\"] = recentCoordinates[i][\"grouping1\"]\n  recentCoordinates[i][\"grouping2,0\"] = recentCoordinates[i][\"grouping2\"]\n  recentCoordinates[i][\"grouping3,0\"] = recentCoordinates[i][\"grouping3\"]\n  recentCoordinates[i][\"grouping4,0\"] = recentCoordinates[i][\"grouping4\"]\n  recentCoordinates[i][\"grouping5,0\"] = recentCoordinates[i][\"grouping5\"]\n  recentCoordinates[i][\"grouping6,0\"] = recentCoordinates[i][\"grouping6\"]\n\n\n  for (var k = 1; k <= 10; k++) {\n      recentCoordinates[i][\"grouping1,\" + k] = recentClusters[i][\"grouping1,\" + k]\n      recentCoordinates[i][\"grouping2,\" + k] = recentClusters[i][\"grouping2,\" + k]\n      recentCoordinates[i][\"grouping3,\" + k] = recentClusters[i][\"grouping3,\" + k]\n      recentCoordinates[i][\"grouping4,\" + k] = recentClusters[i][\"grouping4,\" + k]\n      recentCoordinates[i][\"grouping5,\" + k] = recentClusters[i][\"grouping5,\" + k]\n      recentCoordinates[i][\"grouping6,\" + k] = recentClusters[i][\"grouping6,\" + k]\n  }\n}\n\n\n\n\n\nimport { onMount } from 'svelte';\n\n\nimport {\n        selectedResearcherInfo, \n        selectedResearchInterest, \n        visKeywordEmphasis, \n        visNumClusters,\n        displayNames,\n        displayDistributions,\n        queryKeywordEmphasis,\n        datasetChoice\n} from '../stores/MapStore.js'\n\nvar currTimeout = null;\nvar currentSelectedFaculty = citedCoordinates;\nvar currentSelectedFacultyRankData = citedResearchQuery;\n\nlet hideAllTextTimeout = null;\nlet hideTextAnimating = false;\n\nonMount(renderGraph);\n\n// Hide all names when user hovers over the white space\nconst hideNames = (duration = 300) => {\n  if (!hideTextAnimating){\n    hideTextAnimating = true;\n    d3.select('#PeopleMap')\n      .select('svg')\n      .selectAll('text.name-text')\n      .transition('hideText')\n      .duration(duration)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', () => {hideTextAnimating = false;});\n  }\n\n  // Refresh the timeout\n  clearTimeout(hideAllTextTimeout);\n  hideAllTextTimeout = setTimeout(showNames, 300);\n}\n\n// Show name if the mouse doesnt move for a certain time\nconst showNames = (duration = 300) => {\n  d3.select('#PeopleMap')\n    .select('svg')\n    .selectAll('text.name-text')\n    .transition('showText')\n    .duration(duration)\n    .ease(d3.easeCubicInOut)\n    .style('opacity', 1);\n}\n\nfunction renderGraph() {\n  \n\n  var chartDiv = document.getElementById(\"PeopleMap\");\n\n  var width = chartDiv.clientWidth;\n  var height = chartDiv.clientHeight;\n\n\n\n\n  // Calculate emphasis range\n  var countEmphasis = 0\n  while (currentSelectedFaculty[0]['x' + countEmphasis] != null) {\n      countEmphasis += 1\n  }\n  countEmphasis = countEmphasis - 1\n\n\n\n  // append the svg object to the body of the page\n  var svg = d3.select(\"#PeopleMap\")\n    .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n    .append(\"g\");\n\n\n  // Rectangle for registering clicks on the map\n  svg.append('rect')\n     .attr(\"width\", width)\n     .attr(\"height\", height)\n     .attr(\"opacity\",\"0%\")\n     .on(\"click\", function(d) {\n\n        legendRect.transition()\n                  .duration(1000)\n                  .attr(\"opacity\",\"0%\");\n\n        topTag.transition()\n              .duration(1000)\n              .attr(\"opacity\",\"0%\");\n\n        bottomTag.transition()\n                 .duration(1000)\n                 .attr(\"opacity\",\"0%\");\n\n        if ($selectedResearchInterest != \"\") {\n            $selectedResearchInterest = \"\"\n        }\n\n        handleClick(currentlyClicked);\n\n\n\n     })\n     .on('mousemove', () => {});\n    \n\n\n      // Set domain of the xAxis\n      var x = d3.scaleLinear().range([80, width - 150]);\n\n      x.domain([d3.min(currentSelectedFaculty, function(d) {\n\n        var min = d.x0\n        for (var i = 0; i <= countEmphasis; i++) {\n          if (d[\"x\" + i] < min) {\n            min = d[\"x\" + i]\n          }\n        }\n        return min\n\n      }), d3.max(currentSelectedFaculty, function(d) { \n        \n          var max = d.x0\n          for (var i = 0; i <= countEmphasis; i++) {\n            if (d[\"x\" + i] > max) {\n              max = d[\"x\" + i]\n            }\n          }\n          return max\n\n      })]); \n\n      // Append xAxis\n      var xAxis = svg.append(\"g\")\n                     .attr(\"transform\", \"translate(0,\" + height + \")\");\n\n\n\n      // Set domain of yAxis\n      var y = d3.scaleLinear().range([height - 60, 20]);\n\n\n\n\n      \n\n      y.domain([d3.min(currentSelectedFaculty, function(d) {\n\n          var min = d.y0\n          for (var i = 0; i <= countEmphasis; i++) {\n            if (d[\"y\" + i] < min) {\n              min = d[\"y\" + i]\n            }\n          }\n          return min\n\n      }), d3.max(currentSelectedFaculty, function(d) { \n        \n          var max = d.y0\n          for (var i = 0; i <= countEmphasis; i++) {\n            if (d[\"y\" + i] > max) {\n              max = d[\"y\" + i]\n            }\n          }\n        return max\n\n      })]); \n\n      // Append yAxis\n      var yAxis = svg.append(\"g\");\n\n      \n\n\n\n\n\n      // Red, Orange, Yellow, Green, Turqoise, Blue\n      var colors = [\"#eb3b5a\",\"#fa8231\", \"#f7b731\",\"#20bf6b\",\"#2d98da\",\"#8854d0\"]\n\n\n      // 7 shade gradient of purple, starting with most dark and growing lighter after that\n      var purpleGradient = [\"#3f007d\",\"#54278f\",\"#6a51a3\",\"#807dba\",\"#9e9ac8\",\"#bcbddc\",\"#dadaeb\",\"#efedf5\",\"#fcfbfd\"]\n\n\n\n     \n\n      // Filter out data with the selection\n      var dataFilter = currentSelectedFaculty.map(function(d) {\n        return {xCoordinate: d[\"x3\"], yCoordinate: d[\"y3\"], Author: d.Author, Group: d.grouping6,\n                Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL} \n      })\n\n\n      var totalAuthors = {}\n      for (var i = 0; i < dataFilter.length; i++) {\n        totalAuthors[dataFilter[i].Author] = true\n      }\n\n\n\n      // Currently click author\n      var currentlyClicked = \"\"\n\n\n\n\n\n      // Assign researcher detail view to display the first datapoint data\n      var keywordTokens = dataFilter[0].KeyWords.split(\", \")\n\n      var finalTokens = [\"\",\"\",\"\",\"\",\"\"]\n\n      for (var i = 0; i < keywordTokens.length; i++) {\n          finalTokens[i] = keywordTokens[i]\n      }\n      \n      var updatedResearcherSelection = {\n          name: dataFilter[0].Author,\n          affiliation: dataFilter[0].Affiliation,\n          scholarKeywords: finalTokens,\n          citations: dataFilter[0].Citations,\n          url: dataFilter[0].URL,\n          pictureURL: dataFilter[0].PictureURL\n      }\n\n      selectedResearcherInfo.set(updatedResearcherSelection)\n\n\n\n\n      //Isolates the clusters of researchers for ellipse computation\n      function splitResearchers(filteredData, groupingNumber) {\n\n        var arrayOfClusteredResearchers = []\n        var total = 0\n        var currentGroup = 0\n        var currentSet = []\n        while (total < filteredData.length) {\n          currentSet = filteredData.filter(function(d) {\n              if (d.Group == currentGroup) {\n                return d\n              }\n          })\n\n          arrayOfClusteredResearchers[currentGroup] = currentSet\n          total += currentSet.length\n          currentGroup += 1\n\n        }\n\n        return arrayOfClusteredResearchers\n\n      }\n\n\n      //Separates the researcher groups into arrays of x and y coordinates\n      function generateXAndYCoordinates(splitGroups, keywordsEmphasis) {\n        \n        var totalCoordinates = []\n        for (var i = 0; i < splitGroups.length; i++) {\n          var currentGroup = []\n          for (var j = 0; j < splitGroups[i].length; j++) {\n            currentGroup[j] = [splitGroups[i][j].xCoordinate, splitGroups[i][j].yCoordinate]\n          }\n          totalCoordinates[i] = currentGroup\n        }\n        return totalCoordinates\n      }\n\n      //Gets the center among all of the coordinates and the eigenvectors\n      function generateEllipseInfo(coordinateMatrices) {\n        \n        var totalInfo = []\n\n        for (var i = 0; i < coordinateMatrices.length; i++) {\n          \n          var centerX = 0\n          var centerY = 0\n          var xValues = []\n          var yValues = []\n\n          for (var j = 0; j < coordinateMatrices[i].length; j++) {\n            centerX += coordinateMatrices[i][j][0]\n            centerY += coordinateMatrices[i][j][1]\n            xValues[j] = coordinateMatrices[i][j][0]\n            yValues[j] = coordinateMatrices[i][j][1]\n          }\n\n          centerX = centerX / coordinateMatrices[i].length\n          centerY = centerY / coordinateMatrices[i].length\n\n          var covarianceMatrix = cov(xValues, yValues)\n          var eigenvectors = (SingularValueDecomposition.SVD(covarianceMatrix)).u\n          var eigenvalues = (SingularValueDecomposition.SVD(covarianceMatrix)).q\n\n          var currentEllipseData = {CenterX: centerX, CenterY: centerY, Eigenvectors: eigenvectors, Eigenvalues: eigenvalues, Group: i}\n\n          totalInfo[i] = currentEllipseData\n        }\n\n        return totalInfo\n\n      }\n\n      // Process initial info for ellipses\n      var separation = splitResearchers(dataFilter, 6)\n      var completedSet = generateXAndYCoordinates(separation, 0)\n      var ellipseInfo = generateEllipseInfo(completedSet)\n\n      var currentEllipseInfo = ellipseInfo;\n\n      // Ellipses representing the Gaussian distribution\n      var outerEllipse = svg.selectAll('outerEllipse')\n                             .data(ellipseInfo)\n                          .enter()\n                             .append('ellipse');\n\n      outerEllipse.attr(\"rx\", function(d) {\n                               return x(d.Eigenvalues[0] / d.Eigenvalues[1]) / 4\n                          })\n                    .attr(\"ry\", function(d) {\n                                return y(d.Eigenvalues[1]) / 4\n                          })\n                    .attr(\"transform\", function(d) {\n                                var angle = Math.atan(d.Eigenvectors[0][1] / d.Eigenvectors[0][0])\n                                angle = (angle / 3.1415) * 180 + 90\n                                return \"translate(\"+ x(d.CenterX) +\",\" + y(d.CenterY) + \") rotate(\" + angle + \")\"\n                          })\n                    .style(\"fill\", function(d) {\n                        return \"url(#radial-gradient\" + d.Group + \")\"\n                    })\n                    .style('mix-blend-mode',\"multiply\")\n                    .attr(\"opacity\", \"0%\");\n\n      // Set the jittering width\n      var jitterWidth = 0\n\n      // Initialize dots with Zero Keywords and Five Clusters\n      var dot = svg\n        .selectAll('circle')\n        .data(dataFilter)\n        .enter()\n        .append('circle')\n          .attr(\"cx\", function(d) {\n            return x(d.xCoordinate) + Math.random() * jitterWidth\n          })\n          .attr(\"cy\", function(d) { \n            return y(d.yCoordinate) + Math.random() * jitterWidth\n          })\n          .attr(\"r\", 8)\n          .style(\"fill\", function(d) {\n              return colors[d.Group]\n          })\n          .attr(\"opacity\", \"70%\")\n          .on('mousemove', () => {d3.event.stopPropagation();})\n          .on(\"mouseover\", function(dataPoint) {\n              if (currentlyClicked == \"\") {\n                  // Bypass the hide text timeout and show all text\n                  showNames(0);\n\n                  var keywordTokens = dataPoint.KeyWords.split(\", \")\n\n                  var finalTokens = [\"\",\"\",\"\",\"\",\"\"]\n\n                  for (var i = 0; i < keywordTokens.length; i++) {\n                      finalTokens[i] = keywordTokens[i]\n                  }\n            \n                  var updatedResearcherSelection = {\n                    name: dataPoint.Author,\n                    affiliation: dataPoint.Affiliation,\n                    scholarKeywords: finalTokens,\n                    citations: dataPoint.Citations,\n                    url: dataPoint.URL,\n                    pictureURL: dataPoint.PictureURL\n                  }\n\n                  selectedResearcherInfo.set(updatedResearcherSelection)\n\n                  text.data(dataFilter).transition()\n                    .duration(300)\n                      .text(function(d) {\n                        if (d.Author == dataPoint.Author) {\n                          return d.Author\n                        } else {\n                          return \"\"\n                        }\n                    })\n\n                  dot.data(dataFilter).transition()\n                    .duration(300)\n                      .attr(\"opacity\", function(d) {\n                          if (d.Author == dataPoint.Author) {\n                            return \"100%\"\n                          } else {\n                            return \"20%\"\n                          }\n                      })\n                      .attr(\"r\", function(d) {\n                          if (d.Author == dataPoint.Author) {\n                            return 10\n                          } else {\n                            return 8\n                          }\n                      })\n\n              }\n\n          })\n          .on(\"mouseout\", function(dataPoint) {\n              hideNames(0);\n              text.data(dataFilter)\n                .transition()\n                .duration(300)\n                .text(function(d) {\n                        if ($displayNames == true) {\n                          return d.Author\n                        } else {\n                          return \"\"\n                        }\n                    })\n\n              dot.data(dataFilter)\n                .transition()\n              .duration(300)\n                .attr(\"opacity\", function(d) {\n                    if (currentlyClicked != \"\") {\n\n                        if (currentlyClicked == d.Author) {\n                          return \"100%\"\n                        } else {\n                          return \"20%\"\n                        }\n\n                    } else {\n                        return \"70%\"\n                    }\n                    \n                })\n                .attr(\"r\", function(d) {\n\n                    if (currentlyClicked != \"\") {\n\n                        if (currentlyClicked == d.Author) {\n                          return 10\n                        } else {\n                          return 8\n                        }\n\n                    } else {\n                        return 8\n                    }\n\n                })\n          })\n          .on(\"click\", function(dataPoint) {\n\n              handleClick(dataPoint.Author);\n\n          })\n\n          var text = svg.selectAll(\"text\")\n                    .data(dataFilter)\n                 .enter()\n                    .append(\"text\")\n                    .attr('class', 'name-text')\n                    .text(function(d) {\n                        return \"\"\n                    })\n                    .attr(\"x\", function(d) {\n                        return x(d.xCoordinate) + 10 + Math.random() * jitterWidth\n                    })\n                    .attr(\"y\", function(d) {\n                        return y(d.yCoordinate) + 4 + Math.random() * jitterWidth\n                    })\n                    .style(\"text-shadow\",\"-1.5px 0 white, 0 1.5px white, 1.5px 0 white, 0 -1.5px white\")\n                    .attr(\"font_family\", \"sans-serif\")  // Font type\n                    .attr(\"font-size\", \"11px\")  // Font size\n                    .attr(\"fill\", \"black\")   // Font color\n                    .style(\"cursor\",\"pointer\")\n\n\n\n          // Insert ResearchQuery Legend\n          var legend = svg.append(\"defs\")\n                          .append(\"svg:linearGradient\")\n                          .attr(\"id\", \"gradient\")\n                          .attr(\"x1\", \"100%\")\n                          .attr(\"y1\", \"0%\")\n                          .attr(\"x2\", \"100%\")\n                          .attr(\"y2\", \"100%\")\n                          .attr(\"spreadMethod\", \"pad\");\n\n                        legend.append(\"stop\")\n                          .attr(\"offset\", \"0%\")\n                          .attr(\"stop-color\", \"#3f007d\")\n                          .attr(\"stop-opacity\", 1);\n\n                        legend.append(\"stop\")\n                          .attr(\"offset\", \"100%\")\n                          .attr(\"stop-color\", \"#dadaeb\")\n                          .attr(\"stop-opacity\", 1);\n\n                        var legendRect = svg.append(\"rect\")\n                                            .attr(\"width\", 15)\n                                            .attr(\"height\", 150)\n                                            .style(\"fill\", \"url(#gradient)\")\n                                            .attr(\"transform\", \"translate(\" + (width - 40) + \", 15)\")\n                                            .attr(\"opacity\", \"0%\");\n\n            \n            // Legend tags    \n            var topTag = svg.append(\"text\")\n                            .text(\"More Aligned\")\n                            .attr(\"x\", width - 110)\n                            .attr(\"y\", 20)\n                            .attr(\"font_family\", \"sans-serif\")  // Font type\n                            .attr(\"font-size\", \"10px\")  // Font size\n                            .attr(\"fill\", \"black\")   // Font color\n                            .attr(\"opacity\",\"0%\");\n\n            var bottomTag = svg.append(\"text\")\n                               .text(\"Less Aligned\")\n                               .attr(\"x\", width - 110)\n                               .attr(\"y\", 165)\n                               .attr(\"font_family\", \"sans-serif\")  // Font type\n                               .attr(\"font-size\", \"10px\")  // Font size\n                               .attr(\"fill\", \"black\")   // Font color\n                               .attr(\"opacity\",\"0%\");\n\n\n\n      // Add gradient ellipses\n      var defs = svg.append(\"defs\");\n\n      //Append a radialGradient element to the defs and give it a unique id\n      var radialGradient0 = defs.append(\"radialGradient\")\n          .attr(\"id\", \"radial-gradient0\")\n          .attr(\"rx\", \"50%\")   \n          .attr(\"ry\", \"50%\");  \n      radialGradient0.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", colors[0])\n          .attr(\"opacity\", \"50%\");\n      radialGradient0.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", \"#F8F8F8\")\n          .attr(\"opacity\", \"50%\");\n\n      var radialGradient1 = defs.append(\"radialGradient\")\n          .attr(\"id\", \"radial-gradient1\")\n          .attr(\"rx\", \"50%\")  \n          .attr(\"ry\", \"50%\");  \n      radialGradient1.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", colors[1])\n          .attr(\"opacity\", \"50%\");\n      radialGradient1.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", \"#F8F8F8\")\n          .attr(\"opacity\", \"50%\");\n\n      var radialGradient2 = defs.append(\"radialGradient\")\n          .attr(\"id\", \"radial-gradient2\")\n          .attr(\"rx\", \"50%\")   \n          .attr(\"ry\", \"50%\");   \n      radialGradient2.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", colors[2])\n          .attr(\"opacity\", \"50%\");\n      radialGradient2.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", \"#F8F8F8\")\n          .attr(\"opacity\", \"50%\");\n\n      var radialGradient3 = defs.append(\"radialGradient\")\n          .attr(\"id\", \"radial-gradient3\")\n          .attr(\"rx\", \"50%\")   \n          .attr(\"ry\", \"50%\");   \n      radialGradient3.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", colors[3])\n          .attr(\"opacity\", \"50%\");\n      radialGradient3.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", \"#F8F8F8\")\n          .attr(\"opacity\", \"50%\");\n\n      var radialGradient4 = defs.append(\"radialGradient\")\n          .attr(\"id\", \"radial-gradient4\")\n          .attr(\"rx\", \"50%\")   \n          .attr(\"ry\", \"50%\");   \n      radialGradient4.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", colors[4])\n          .attr(\"opacity\", \"50%\");\n      radialGradient4.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", \"#F8F8F8\")\n          .attr(\"opacity\", \"50%\");\n\n      var radialGradient5 = defs.append(\"radialGradient\")\n          .attr(\"id\", \"radial-gradient5\")\n          .attr(\"rx\", \"50%\")   \n          .attr(\"ry\", \"50%\");   \n      radialGradient5.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", colors[5])\n          .attr(\"opacity\", \"50%\");\n      radialGradient5.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", \"#F8F8F8\")\n          .attr(\"opacity\", \"50%\");\n\n\n\n      // Upon change of keywords emphasis, updates the map visualization\n      function updateKeywords(selectedGroup, clustersNumber) {\n\n\n            // Filter out data with the selection\n            var dataFilter = currentSelectedFaculty.map(function(d) {\n              return {xCoordinate: d[\"x\" + selectedGroup], yCoordinate:d[\"y\" + selectedGroup], Author: d.Author,\n                      Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL,\n                      Group: d[\"grouping\" + clustersNumber + \",\" + selectedGroup], PictureURL: d.PictureURL} \n            })\n\n            dot\n              .data(dataFilter)\n              .attr('pointer-events', 'none')\n              .transition('dot-change')\n              .duration(1000)\n              // Temporarlly disable pointer events\n              .attr(\"cx\", function(d) {\n                return x(+d.xCoordinate) + Math.random() * jitterWidth\n              })\n              .attr(\"cy\", function(d) { \n                return y(+d.yCoordinate) + Math.random() * jitterWidth \n              })\n              .style(\"fill\", function(d) {\n                return colors[d.Group]\n              })\n              .on('end', (d, i, g) => {\n                // Restore pointer events after the animation\n                d3.select(g[i])\n                  .attr('pointer-events', 'auto');\n              });\n          \n          text.data(dataFilter)\n              .transition()\n              .duration(1000)\n              .attr(\"x\", function(d) {\n                  return x(d.xCoordinate) + 10 + Math.random() * jitterWidth\n              })\n              .attr(\"y\", function(d) {\n                  return y(d.yCoordinate) + 4 + Math.random() * jitterWidth\n              })\n\n\n      }\n\n      // A function that updates the map with a new cluster coloring\n      function updateClusters(selectedGroup, keywordsEmphasis) {\n\n       \n            // Filter out data with the selection\n            var dataFilter = currentSelectedFaculty.map(function(d) {\n              return { Grouping: d[\"grouping\" + selectedGroup + \",\" + keywordsEmphasis], Author: d.Author, Affiliation: d.Affiliation, \n                       KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL } \n            })\n\n\n            dot\n              .data(dataFilter)\n              .transition()\n              .duration(1000)\n                .style(\"fill\", function(d) {\n                  return colors[d.Grouping]\n                })\n              \n\n\n\n      }\n\n    // A function that update the map with a new ranking coloring\n    function updateRanking(phrase, emphasis) {\n\n\n        // Assign new ranking for current Research Query\n        for(var i = 0; i < currentSelectedFaculty.length; i++) {\n\n          currentSelectedFaculty[i].currentRank = currentSelectedFacultyRankData[phrase][emphasis][i].rank\n\n        }\n\n        // Filter out data with the selection\n        var dataFilter = currentSelectedFaculty.map(function(d) {\n          return { Author: d.Author, Affiliation: d.Affiliation, CurrentRank: d.currentRank,\n                   KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL } \n        })\n\n\n        dot\n          .data(dataFilter)\n          .transition()\n          .duration(1000)\n            .style(\"fill\", function(d) {\n              if (d.CurrentRank == -1 || d.CurrentRank >= 5) {\n                return purpleGradient[6]\n              } else {\n                return purpleGradient[d.CurrentRank]\n              }\n            })\n\n        \n\n\n\n\n\n        legendRect.transition()\n                  .duration(1000)\n                  .attr(\"opacity\",\"100%\");\n\n        topTag.transition()\n              .duration(1000)\n              .attr(\"opacity\",\"100%\");\n\n        bottomTag.transition()\n              .duration(1000)\n              .attr(\"opacity\",\"100%\");\n\n\n     \n\n    }\n\n\n\n    // A function that updates the map with the researcher names, either displayed or undisplayed\n    function updateNames(selectedOption) {\n\n            // Filter out data with the selection\n            var dataFilter = currentSelectedFaculty.map(function(d) {\n                return { Author: d.Author, Affiliation: d.Affiliation, KeyWords: d.KeyWords, \n                         Citations: d.Citations, URL: d.URL, Rank: d.Rank, PictureURL: d.PictureURL } \n            })\n\n            // Track mousemove in show all name mode\n            svg.on('mousemove', selectedOption ? hideNames : () => {});\n\n            text.data(dataFilter)\n                .transition()\n              .duration(1000)\n                .attr(\"font_family\", \"sans-serif\")  // Font type\n                .attr(\"font-size\", \"11px\")  // Font size\n                .attr(\"fill\", \"black\")   // Font color\n                .text(function(d) {\n                        if (selectedOption == true) {\n                          return d.Author\n                        } else {\n                          return \"\"\n                        }\n                    })\n\n\n      }\n\n\n\n\n      // A function that updates the map with a new Gaussian distribution set\n      function updateDistributions(selectedOption, keywordsEmphasis, clustersNumber) {\n\n\n          outerEllipse.data(currentEllipseInfo)\n                        .transition()\n                        .duration(1000)\n                        .attr(\"opacity\", \"0%\")\n\n\n\n          // Filter out data with the selection\n          var dataFilter = currentSelectedFaculty.map(function(d) {\n            return {xCoordinate: d[\"x\" + keywordsEmphasis], yCoordinate:d[\"y\" + keywordsEmphasis], Author: d.Author,\n                    Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, \n                    Group: d[\"grouping\" + clustersNumber + \",\" + keywordsEmphasis], PictureURL: d.PictureURL} \n          })\n\n          var separation = splitResearchers(dataFilter, clustersNumber)\n          var completedSet = generateXAndYCoordinates(separation, keywordsEmphasis)\n          var ellipseInfo = generateEllipseInfo(completedSet)\n\n          currentEllipseInfo = ellipseInfo\n\n\n          outerEllipse.data(ellipseInfo)\n                      .transition()\n                      .duration(1000)\n                      .attr(\"rx\", function(d) {\n                          var firstEigenvalue = d.Eigenvalues[0]\n                          var secondEigenvalue = d.Eigenvalues[1]\n                          var confidenceInterval = Math.sqrt(d.Eigenvalues[0] * 5.991 * 4)\n                          return confidenceInterval * width / 2\n                      })\n                      .attr(\"ry\", function(d) {\n                          var firstEigenvalue = d.Eigenvalues[0]\n                          var secondEigenvalue = d.Eigenvalues[1]\n                          var confidenceInterval = Math.abs(Math.sqrt(d.Eigenvalues[1] * 5.991 * 4))\n                          return confidenceInterval * height / 2\n                      })\n                      .attr(\"transform\", function(d) {\n                          var angle = Math.atan(d.Eigenvectors[0][1] / d.Eigenvectors[0][0])\n                          angle = (angle / 3.1415) * 180\n                          return \"translate(\"+ x(d.CenterX) +\",\" + y(d.CenterY) + \") rotate(\" + angle + \")\"\n                            })\n                      .style(\"fill\", function(d) {\n                          return \"url(#radial-gradient\" + d.Group + \")\"\n                      })\n                      .style('mix-blend-mode',\"multiply\")\n                      .attr(\"opacity\", function(d) {\n                          if (selectedOption == true) {\n                              return \"50%\"\n                          } else {\n                              return \"0%\"\n                          }\n                      });\n          }\n\n\n\n\n\n      // A function that updates the map with the new dataset\n      function updateDataset(selectedKeywords, selectedClusters) {\n\n\n            // Filter out data with the selection\n            var dataFilter = currentSelectedFaculty.map(function(d) {\n              return {xCoordinate: d[\"x\" + selectedKeywords], yCoordinate:d[\"y\" + selectedKeywords], Author: d.Author,\n                      Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL,\n                      Grouping: d[\"grouping\" + selectedClusters + \",\" + selectedKeywords], PictureURL: d.PictureURL} \n            })\n\n\n            dot\n              .data(dataFilter)\n              .transition()\n              .duration(1000)\n                .attr(\"cx\", function(d) {\n                  return x(+d.xCoordinate) + Math.random() * jitterWidth\n                })\n                .attr(\"cy\", function(d) { \n                  return y(+d.yCoordinate) + Math.random() * jitterWidth\n                })\n                .style(\"fill\", function(d) {\n                  return colors[d.Grouping]\n                })\n\n            text.data(dataFilter)\n                .transition()\n                .duration(1000)\n                .attr(\"x\", function(d) {\n                    return x(d.xCoordinate) + 10\n                })\n                .attr(\"y\", function(d) {\n                    return y(d.yCoordinate) + 4\n                })\n\n            \n              \n\n\n\n      }\n\n\n      function handleClick(dataPoint) {\n\n          var dataFilter = currentSelectedFaculty.map(function(d) {\n                        return { Grouping: d[\"grouping\" + $visNumClusters + \",\" + $visKeywordEmphasis], Author: d.Author, Affiliation: d.Affiliation, KeyWords: d.KeyWords, Citations: d.Citations, URL: d.URL, PictureURL: d.PictureURL } \n                  })\n\n\n          if (currentlyClicked == \"\" & dataPoint != \"\") {\n\n\n                    currentlyClicked = dataPoint\n\n                    dot.data(dataFilter)\n                        .transition()\n                      .duration(200)\n                        .attr(\"opacity\", function(d) {\n\n                            if (d.Author == dataPoint) {\n\n                              var keywordTokens = d.KeyWords.split(\", \")\n\n\n\n                              var finalTokens = [\"\",\"\",\"\",\"\",\"\"]\n\n                              for (var i = 0; i < keywordTokens.length; i++) {\n                                  finalTokens[i] = keywordTokens[i]\n                              }\n\n                              var updatedResearcherSelection = {\n                                name: d.Author,\n                                affiliation: d.Affiliation,\n                                scholarKeywords: finalTokens,\n                                citations: d.Citations,\n                                url: d.URL,\n                                pictureURL: d.PictureURL\n                              }\n\n                              selectedResearcherInfo.set(updatedResearcherSelection)\n\n                              return \"100%\"\n\n                            } else {\n\n                              return \"20%\"\n                              \n                            }\n                        })\n                        .attr(\"r\", function(d) {\n                            if (d.Author == dataPoint) {\n                              return 10\n                            } else {\n                              return 8\n                            }\n                        })\n                        .attr(\"stroke-width\", function(d) {\n                            if (d.Author == dataPoint) {\n                              return \"2px\"\n                            } else {\n                              return \"0px\"\n                            }\n                        })\n                        .attr(\"stroke\", function(d) {\n                            if (d.Author == dataPoint) {\n                              return \"#6495ED\"\n                            } else {\n                              return \"black\"\n                            }\n                        })\n\n                } else if (currentlyClicked != \"\" & dataPoint == currentlyClicked) {\n\n\n\n                    dot.data(dataFilter)\n                              .transition()\n                            .duration(200)\n                              .attr(\"opacity\", \"70%\")\n                              .attr(\"r\", 8)\n                              .attr(\"stroke-width\", \"0px\")\n                              .attr(\"stroke\", \"black\")\n                              .style(\"fill\", function(d) {\n                                return colors[d.Grouping]\n                              })\n\n                    currentlyClicked = \"\"\n\n                }\n\n\n      }\n\n\n\n\n\n\n    // When the button is changed, run the updateKeywords function and update the map\n    visKeywordEmphasis.subscribe((selectedOption) => {        \n        \n        updateKeywords(selectedOption, $visNumClusters)\n        updateDistributions($displayDistributions, selectedOption, $visNumClusters)\n\n\n        $selectedResearchInterest = \"\"\n\n        legendRect.transition()\n                  .duration(1000)\n                  .attr(\"opacity\",\"0%\");\n\n        topTag.transition()\n              .duration(1000)\n              .attr(\"opacity\",\"0%\");\n\n        bottomTag.transition()\n                 .duration(1000)\n                 .attr(\"opacity\",\"0%\");\n\n\n    })\n    \n\n    // When the button is changed, run the updateClusters function and update the map\n    visNumClusters.subscribe((selectedOption) => {    \n      \n      updateClusters(selectedOption, $visKeywordEmphasis)\n      updateDistributions($displayDistributions, $visKeywordEmphasis, selectedOption)\n\n\n      $selectedResearchInterest = \"\"\n\n      legendRect.transition()\n                  .duration(1000)\n                  .attr(\"opacity\",\"0%\");\n\n      topTag.transition()\n            .duration(1000)\n            .attr(\"opacity\",\"0%\");\n\n      bottomTag.transition()\n               .duration(1000)\n               .attr(\"opacity\",\"0%\");\n\n\n    })\n\n\n\n    // When the button is changed, run the updateNames function and update the map\n    displayNames.subscribe((selectedOption) => {    \n      // run the updateNames function with this selected option\n      updateNames(selectedOption)\n    })\n\n\n    // When the button is changed, run the updateDistributions function and update the map\n    displayDistributions.subscribe((selectedOption) => {    \n      \n      updateDistributions(selectedOption, $visKeywordEmphasis, $visNumClusters)\n      \n      if (selectedOption == true) {\n          \n\n          $selectedResearchInterest = \"\"\n\n          legendRect.transition()\n                    .duration(1000)\n                    .attr(\"opacity\",\"0%\");\n\n          topTag.transition()\n                .duration(1000)\n                .attr(\"opacity\",\"0%\");\n\n          bottomTag.transition()\n                   .duration(1000)\n                   .attr(\"opacity\",\"0%\");\n      }\n\n    })\n\n\n\n    // When a new research query is inputted, update the map with the new ranking\n    selectedResearchInterest.subscribe((value) => {\n\n\n      \n      if (value == \"\") {\n\n        legendRect.transition()\n                  .duration(1000)\n                  .attr(\"opacity\",\"0%\");\n\n        topTag.transition()\n              .duration(1000)\n              .attr(\"opacity\",\"0%\");\n\n        bottomTag.transition()\n                 .duration(1000)\n                 .attr(\"opacity\",\"0%\");\n\n        updateClusters($visNumClusters, $visKeywordEmphasis)\n\n\n\n        handleClick(currentlyClicked)\n\n\n\n        return\n\n      }\n\n\n      if (totalAuthors[value]) {\n        handleClick(value)\n        return\n      }\n\n      var emphasis = $queryKeywordEmphasis;\n      if (currentSelectedFacultyRankData[value.toLowerCase()]) {\n        $displayDistributions = false\n        updateRanking(value.toLowerCase(), emphasis)\n      }\n\n      updateDistributions($displayDistributions, $visKeywordEmphasis, $visNumClusters)\n\n    })\n\n    // When a new dataset is selected, update the map with the new dataset\n    datasetChoice.subscribe((value) => {\n\n      if (value == \"Most Cited Publications\") {\n        currentSelectedFaculty = citedCoordinates;\n        currentSelectedFacultyRankData = citedResearchQuery;\n      } else if (value == \"Most Recent Publications\") {\n        currentSelectedFaculty = recentCoordinates;\n        currentSelectedFacultyRankData = recentResearchQuery;\n      }\n\n\n      $selectedResearchInterest = \"\"\n\n      updateDataset($visKeywordEmphasis, $visNumClusters)\n      updateDistributions($displayDistributions, $visKeywordEmphasis, $visNumClusters)\n\n      legendRect.transition()\n                  .duration(1000)\n                  .attr(\"opacity\",\"0%\");\n\n      topTag.transition()\n            .duration(1000)\n            .attr(\"opacity\",\"0%\");\n\n      bottomTag.transition()\n               .duration(1000)\n               .attr(\"opacity\",\"0%\");\n\n\n    })\n\n        \n\n}\n\n</script>\n\n<style>\n  /* Need to disable interaction of ellipse to detect mousemove on svg */\n  :global(svg ellipse) {\n    pointer-events: none;\n  }\n\n  :global(svg text.name-text) {\n    cursor: default;\n    pointer-events: none;\n  }\n\n  .switch[type=\"checkbox\"].is-small:checked + label::before {\n    background: #652DC1;\n  }\n\n</style>\n\n\n\n<nav class=\"level is-mobile\" style=\"padding-top: 0px; margin-top: 0px; padding-bottom: 15px; padding-left: 15px; height: 30px; min-width: 1340;\">\n  <input id=\"ShowNamesSwitch\" type=\"checkbox\" name=\"ShowNamesSwitch\" \n                class=\"switch is-small is-rounded\" style=\"padding-top: 0px; color: purple; min-width: 200px;\" bind:checked={$displayNames}>\n  <label for=\"ShowNamesSwitch\" ></label>\n  <p class=\"text is-black\" style=\"width: 105%; padding-top: 14px; min-width: 140px;\">Show All Names</p>\n\n  <p class=\"text is-black\" style=\"padding-top: 14px;\">#Clusters</p>\n  <input id=\"sliderWithValue\" class=\"slider has-output svelte-1v4uv99 is-circle is-purple\" bind:value={$visNumClusters} min=\"1\" max=\"6\" step=\"1\" type=\"range\" style=\"margin-top: 0px;outline: none;border-top-width: 0px;border-right-width: 0px;border-left-width: 0px;border-bottom-width: 0px; width: 150px; padding-top: 37px; fill: #652DC1; padding-right: 25px\">\n\n</nav>"
  ],
  "names": [],
  "mappings": "AAUQ,uBAAQ,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,cAAc,CAAE,GAAG,AACvB,CAAC;ACHP,KAAK,8BAAC,CAAC,AACH,UAAU,CAAE,OAAO,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AAC3B,CAAC,AAED,8CAAgB,MAAM,AAAC,CAAC,AACtB,eAAe,CAAE,SAAS,AAC5B,CAAC,AAED,gBAAgB,8BAAC,CAAC,AAChB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,MAAM,AAClB,CAAC,AACD,+BAAgB,CAAC,GAAG,eAAC,CAAC,AACpB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,OAAO,AACrB,CAAC;ACvCK,uBAAQ,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,cAAc,CAAE,KAAK,CACrB,WAAW,CAAE,IAAI,AACrB,CAAC;ACNL,oBAAM,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,0BAAY,MAAM,AAAC,CAAC,AAClB,eAAe,CAAE,IAAI,AACvB,CAAC;ACVG,qBAAM,CAAC,AACH,UAAU,CAAE,OAAO,AACvB,CAAC,AAED,6BAAc,MAAM,AAAC,CAAC,AAElB,qBAAqB,CAAE,KAAK,AAEhC,CAAC;AC4rCC,WAAW,AAAE,CAAC,AACpB,cAAc,CAAE,IAAI,AACtB,CAAC,AAEO,kBAAkB,AAAE,CAAC,AAC3B,MAAM,CAAE,OAAO,CACf,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,QAAQ,CAAG,mBAAK,QAAQ,AAAC,CAAC,AACzD,UAAU,CAAE,OAAO,AACrB,CAAC"
}